import{_ as e,o as a,c as t,O as o}from"./chunks/framework.0b8e562d.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"css/base.md","filePath":"css/base.md","lastUpdated":1686051029000}'),d={name:"css/base.md"},s=o('<h2 id="_1-css-盒子模型" tabindex="-1">1.CSS 盒子模型 <a class="header-anchor" href="#_1-css-盒子模型" aria-label="Permalink to &quot;1.CSS 盒子模型&quot;">​</a></h2><p>浏览器会把所有 DOM 元素都看成一个盒子,盒子由 margin(盒子外边距)、padding(盒子内边距)、border(盒子边框)、content(盒子内容)4 部分组成。</p><p>盒子模型可分为标准盒子模型和怪异盒子模型,<code>box-sizing:content-box</code>可以将元素设置为标准盒子模型, <code>box-sizing:border-box</code>可以将元素设置为怪异盒子模型。标准盒子模型会把 padding 撑开,而怪异模式则相当于将盒子的大小固定好,再将内容装入盒子,盒子的大小并不会被 padding 所撑开。</p><ul><li>标准盒子模型下:<code>盒子总宽度/高度 = 内容 width/内容 height + padding + border + margin</code>。</li><li>怪异盒子模型下:<code>盒子总宽度/高度 = 内容 width/内容 height + margin</code>。 标准盒子模型下盒子的宽高会包含 padding 和 border,而怪异盒子模型下盒子的宽高不包含 padding 和 border。</li></ul><h2 id="_2-css-bfc" tabindex="-1">2.CSS BFC <a class="header-anchor" href="#_2-css-bfc" aria-label="Permalink to &quot;2.CSS BFC&quot;">​</a></h2><h2 id="_3-bem-命名规范" tabindex="-1">3.BEM 命名规范 <a class="header-anchor" href="#_3-bem-命名规范" aria-label="Permalink to &quot;3.BEM 命名规范&quot;">​</a></h2>',6),r=[s];function i(c,n,_,l,h,b){return a(),t("div",null,r)}const g=e(d,[["render",i]]);export{m as __pageData,g as default};
