import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.8c2da384.js";const o="/frontEnd-repository/assets/prototype.3590548c.png",A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/prototype.md","filePath":"js/prototype.md","lastUpdated":1708966819000}'),l={name:"js/prototype.md"},e=p(`<h2 id="_1-什么是原型" tabindex="-1">1.什么是原型? <a class="header-anchor" href="#_1-什么是原型" aria-label="Permalink to &quot;1.什么是原型?&quot;">​</a></h2><p>JavaScript 是一种基于原型的语言 (prototype-based language)。在 js 中每个对象都有原型对象,对象以其原型为模板,从原型继承方法和属性,这些属性和方法定义在对象的构造器函数的 <code>prototype</code> 属性上,而非对象实例本身。简单来说 js 中每个对象都拥有原型对象<code>__proto__</code>,<code>__proto__</code>指向当前对象的原型对象(父对象)。每个函数都拥有一个原型对象(即 函数的<code>prototype</code>属性,其他类型是上不存在 <code>prototype</code>属性),对象的属性和定义的方法在存储在对象构造器函数的 <code>prototype</code> 上,<code>prototype</code> 被称为对象的显示原型,而<code>__proto__</code>被称为对象的隐式原型,每个对象上都存在<code>__proto__</code>,即每个对象都有隐式原型。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&quot;z乘风&quot;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// undefined 对象上不存在prototype属性,prototype是函数的原型对象</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(user.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// user的指向Object,而Object的__proto__为null</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    constructor: ƒ Object(),</span></span>
<span class="line"><span style="color:#6A737D;">    hasOwnProperty: ƒ hasOwnProperty(),</span></span>
<span class="line"><span style="color:#6A737D;">    isPrototypeOf: ƒ isPrototypeOf(),</span></span>
<span class="line"><span style="color:#6A737D;">    propertyIsEnumerable: ƒ propertyIsEnumerable(),</span></span>
<span class="line"><span style="color:#6A737D;">    toLocaleString: ƒ toLocaleString(),</span></span>
<span class="line"><span style="color:#6A737D;">    toString: ƒ toString(),</span></span>
<span class="line"><span style="color:#6A737D;">    valueOf: ƒ valueOf(),</span></span>
<span class="line"><span style="color:#6A737D;">    __proto__:null</span></span>
<span class="line"><span style="color:#6A737D;">}</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数不仅有显示原型(prototype),同时也具有隐式原型(__proto__),因为函数是一个特殊的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// {constructor: ƒ fn(),[[Prototype]]: Object}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fn.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// ƒ () { [native code] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&quot;z乘风&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">user</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// undefined 对象上不存在prototype属性,prototype是函数的原型对象</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(user.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// user的指向Object,而Object的__proto__为null</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    constructor: ƒ Object(),</span></span>
<span class="line"><span style="color:#6A737D;">    hasOwnProperty: ƒ hasOwnProperty(),</span></span>
<span class="line"><span style="color:#6A737D;">    isPrototypeOf: ƒ isPrototypeOf(),</span></span>
<span class="line"><span style="color:#6A737D;">    propertyIsEnumerable: ƒ propertyIsEnumerable(),</span></span>
<span class="line"><span style="color:#6A737D;">    toLocaleString: ƒ toLocaleString(),</span></span>
<span class="line"><span style="color:#6A737D;">    toString: ƒ toString(),</span></span>
<span class="line"><span style="color:#6A737D;">    valueOf: ƒ valueOf(),</span></span>
<span class="line"><span style="color:#6A737D;">    __proto__:null</span></span>
<span class="line"><span style="color:#6A737D;">}</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数不仅有显示原型(prototype),同时也具有隐式原型(__proto__),因为函数是一个特殊的对象</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">fn</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// {constructor: ƒ fn(),[[Prototype]]: Object}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(fn.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// ƒ () { [native code] }</span></span></code></pre></div><h2 id="_2-prototype、proto、constructor-三者之间的关系" tabindex="-1">2.prototype、<strong>proto</strong>、constructor 三者之间的关系 <a class="header-anchor" href="#_2-prototype、proto、constructor-三者之间的关系" aria-label="Permalink to &quot;2.prototype、**proto**、constructor 三者之间的关系&quot;">​</a></h2><p><strong>prototype</strong>:只有函数才有<code>prototype</code>属性,<code>prototype</code> 是一个对象,它有 2 个属性,第一个属性是函数的构造函数,第二个是<code>proto</code>属性,它指向当前函数的父原型对象。允许函数所实例化的对象们都可以找到公用的属性和方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 声明一个函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#6A737D;">// 对Person函数进行实例化,得到一个Person函数实例</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 只有函数才有prototype属性,函数的prototype属性由constructor函数和__proto__属性构成,</span></span>
<span class="line"><span style="color:#6A737D;"> * constructor属性指向实例化对象的构造函数,实例化对象的__proto__指向它父对象的原型(prototype),</span></span>
<span class="line"><span style="color:#6A737D;"> * 即p.__proto === Person.prototype</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Person</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// {constructor: ƒ Person(),__proto__: Object}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 因为p实例是由Person函数实例化而来,Person是p的父对象,</span></span>
<span class="line"><span style="color:#6A737D;"> * 所以p.__proto__指向的是Person.prototype</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Person</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 声明一个函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#6A737D;">// 对Person函数进行实例化,得到一个Person函数实例</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 只有函数才有prototype属性,函数的prototype属性由constructor函数和__proto__属性构成,</span></span>
<span class="line"><span style="color:#6A737D;"> * constructor属性指向实例化对象的构造函数,实例化对象的__proto__指向它父对象的原型(prototype),</span></span>
<span class="line"><span style="color:#6A737D;"> * 即p.__proto === Person.prototype</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// {constructor: ƒ Person(),__proto__: Object}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 因为p实例是由Person函数实例化而来,Person是p的父对象,</span></span>
<span class="line"><span style="color:#6A737D;"> * 所以p.__proto__指向的是Person.prototype</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//true</span></span></code></pre></div><p><strong><code>__proto__</code></strong>:每个对象都有一个<code>__proto__</code>属性,<code>__proto__</code>属性保存着大量对象的信息,其中<code>__proto__</code>.constructor 指向对象的构造函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(num.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Number {0, constructor: ƒ, toExponential: ƒ, toFixed: ƒ, toPrecision: ƒ, …}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;z乘风&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// String {&quot;&quot;, constructor: ƒ, anchor: ƒ, big: ƒ, blink: ƒ, …}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 函数的__proto__ */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// {constructor: ƒ Person(),**proto**: Object}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> p.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Number {0, constructor: ƒ, toExponential: ƒ, toFixed: ƒ, toPrecision: ƒ, …}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;z乘风&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// String {&quot;&quot;, constructor: ƒ, anchor: ƒ, big: ƒ, blink: ƒ, …}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 函数的__proto__ */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// {constructor: ƒ Person(),**proto**: Object}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> p.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>constructor</strong>:constructor 属性也是对象才拥有的,它表示当前对象的构造函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(num.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// ƒ Number() { [native code] }</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(num.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Number); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// ƒ Number() { [native code] }</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(num.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Number); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>三者关系图如下: <img src="`+o+`" alt="prototype"></p><h2 id="_3-什么是原型链" tabindex="-1">3.什么是原型链? <a class="header-anchor" href="#_3-什么是原型链" aria-label="Permalink to &quot;3.什么是原型链?&quot;">​</a></h2><p><strong>每个对象都拥有一个原型对象(即<code>proto</code>),它指向父对象的原型对象,并从中继承方法和属性。当访问对象的属性或方法时,优先会查找当前对象是否有目标属性或方法,如果存在则直接返回并终止查找,如果未查找到,就查找当前对象的父原型对象,如果查找到了就直接返回终止查找,否则就一直向上查找其父原型,如果查找到 Object (Object 的父原型为 null)还未查找到就直接返回 undefined 并终止查找,而这一系列的向上查找父原型的过程就被称为原型链</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#6A737D;">// 在Person原型上声明属性</span></span>
<span class="line"><span style="color:#79B8FF;">Person</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 在Object原型上声明方法</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你真帅&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">p.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;zxp&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 查当前对象,有就返回,没有就一直查询父原型,直到查找到Object的父原型为止</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p.name); </span><span style="color:#6A737D;">//zxp</span></span>
<span class="line"><span style="color:#6A737D;">// 当前对象和向上原型都没有address属性</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p.address); </span><span style="color:#6A737D;">//undefined</span></span>
<span class="line"><span style="color:#6A737D;">// 虽然p对象没有age属性,但p的向上原型有age属性</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p.age); </span><span style="color:#6A737D;">//20</span></span>
<span class="line"><span style="color:#6A737D;">// 原型链查找最多查找到Object的原型,Object的父原型为null</span></span>
<span class="line"><span style="color:#E1E4E8;">p.</span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//你真帅</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#6A737D;">// 在Person原型上声明属性</span></span>
<span class="line"><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 在Object原型上声明方法</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你真帅&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">p.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;zxp&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 查当前对象,有就返回,没有就一直查询父原型,直到查找到Object的父原型为止</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p.name); </span><span style="color:#6A737D;">//zxp</span></span>
<span class="line"><span style="color:#6A737D;">// 当前对象和向上原型都没有address属性</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p.address); </span><span style="color:#6A737D;">//undefined</span></span>
<span class="line"><span style="color:#6A737D;">// 虽然p对象没有age属性,但p的向上原型有age属性</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p.age); </span><span style="color:#6A737D;">//20</span></span>
<span class="line"><span style="color:#6A737D;">// 原型链查找最多查找到Object的原型,Object的父原型为null</span></span>
<span class="line"><span style="color:#24292E;">p.</span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//你真帅</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//null</span></span></code></pre></div><h2 id="_4-原型机制的应用之继承" tabindex="-1">4.原型机制的应用之继承 <a class="header-anchor" href="#_4-原型机制的应用之继承" aria-label="Permalink to &quot;4.原型机制的应用之继承&quot;">​</a></h2><p>原型链继承的本质是重写原型对象,代之以一个新类型的实例。原型链继承是基于 JS 原型机制实现的继承方式,在原型机制中构造函数、原型和实例之间的关系为:每个构造函数都有一个原型对象,原型对象都包含一个指向构造函数的指针,而实例都包含一个原型对象的指针,即<code>原型对象.constructor === 构造函数</code>,<code>实例对象.prototype === 其原型对象</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建父函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Super</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;super&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在父函数的原型上创建方法</span></span>
<span class="line"><span style="color:#79B8FF;">Super</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 创建子函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sub</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.subName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sub&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 关键:创建Super的实例,并将该实例赋值给Sub.prototype,于是Sub的实例就拥有了Super实例和原型上的方法与属性</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#79B8FF;">Sub</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Super</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子函数原型上创建方法</span></span>
<span class="line"><span style="color:#79B8FF;">Sub</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getSubName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.subName;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 实例化子函数</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sub</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 此方法继承自Super原型上的getName()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(instance.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// super</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(instance.</span><span style="color:#B392F0;">getSubName</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// sub</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建父函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Super</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;super&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在父函数的原型上创建方法</span></span>
<span class="line"><span style="color:#005CC5;">Super</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 创建子函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sub</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.subName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sub&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 关键:创建Super的实例,并将该实例赋值给Sub.prototype,于是Sub的实例就拥有了Super实例和原型上的方法与属性</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;">Sub</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Super</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在子函数原型上创建方法</span></span>
<span class="line"><span style="color:#005CC5;">Sub</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getSubName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.subName;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 实例化子函数</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sub</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 此方法继承自Super原型上的getName()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(instance.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// super</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(instance.</span><span style="color:#6F42C1;">getSubName</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// sub</span></span></code></pre></div><p>原型链方案存在的缺点:多个实例对引用类型的操作会被篡改。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Super</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.languages </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;Java&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;JavaScript&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Go&quot;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sub</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#79B8FF;">Sub</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Super</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建实例1</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sub01 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sub</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">sub01.languages.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Rust&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sub01.languages); </span><span style="color:#6A737D;">// [&quot;Java&quot;, &quot;JavaScript&quot;, &quot;Go&quot;, &quot;Rust&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建实例2</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sub02 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sub</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 由于实例1修改了父函数的引用数据,导致影响了实例2</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sub02.languages); </span><span style="color:#6A737D;">// [&quot;Java&quot;, &quot;JavaScript&quot;, &quot;Go&quot;, &quot;Rust&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Super</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.languages </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;JavaScript&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Go&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sub</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#005CC5;">Sub</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Super</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建实例1</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sub01 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sub</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">sub01.languages.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Rust&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sub01.languages); </span><span style="color:#6A737D;">// [&quot;Java&quot;, &quot;JavaScript&quot;, &quot;Go&quot;, &quot;Rust&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建实例2</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sub02 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sub</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 由于实例1修改了父函数的引用数据,导致影响了实例2</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sub02.languages); </span><span style="color:#6A737D;">// [&quot;Java&quot;, &quot;JavaScript&quot;, &quot;Go&quot;, &quot;Rust&quot;]</span></span></code></pre></div>`,19),t=[e];function c(r,y,E,i,u,F){return n(),a("div",null,t)}const D=s(l,[["render",c]]);export{A as __pageData,D as default};
