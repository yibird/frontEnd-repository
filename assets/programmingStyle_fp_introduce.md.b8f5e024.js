import{_ as e,c as a,o as r,a as t}from"./app.1f2ef310.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"函数式编程(FP)介绍","slug":"函数式编程-fp-介绍","link":"#函数式编程-fp-介绍","children":[]},{"level":3,"title":"函数基础","slug":"函数基础","link":"#函数基础","children":[]}],"relativePath":"programmingStyle/fp/introduce.md","lastUpdated":1677483206000}'),i={name:"programmingStyle/fp/introduce.md"},n=t('<h3 id="函数式编程-fp-介绍" tabindex="-1">函数式编程(FP)介绍 <a class="header-anchor" href="#函数式编程-fp-介绍" aria-hidden="true">#</a></h3><p><strong>简单来说,函数式编程是一种强调使用函数解决问题的编程风格,函数式的目标是使用函数来抽象作用在数据之上的控制流与操作,从而在系统中消除副作用并减少对状态的改变</strong>。在命令式编程中一般通过 if else 等条件分支来控制程序的流程走向,但在函数式编程中为了复用性,会将一些控制程序的流程走向的操作独立抽象为一个函数,例如 map、filter、reducer 函数,而且这些函数都是纯函数(输入即输出),能够减少对状态的改变,并能消除因修改状态而导致的副作用。</p><h4 id="函数式的特征" tabindex="-1">函数式的特征 <a class="header-anchor" href="#函数式的特征" aria-hidden="true">#</a></h4><h4 id="函数式的优点" tabindex="-1">函数式的优点 <a class="header-anchor" href="#函数式的优点" aria-hidden="true">#</a></h4><h3 id="函数基础" tabindex="-1">函数基础 <a class="header-anchor" href="#函数基础" aria-hidden="true">#</a></h3>',5),d=[n];function s(c,o,h,l,_,p){return r(),a("div",null,d)}const m=e(i,[["render",s]]);export{u as __pageData,m as default};
