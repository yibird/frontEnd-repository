import{_ as e,c as t,o as a,a as i}from"./app.9aa8a5d9.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"React17.0 生命周期函数?","slug":"react17-0-生命周期函数","link":"#react17-0-生命周期函数","children":[]},{"level":3,"title":"组件通讯方式有哪些?","slug":"组件通讯方式有哪些","link":"#组件通讯方式有哪些","children":[]},{"level":3,"title":"class 组件与函数式的区别?","slug":"class-组件与函数式的区别","link":"#class-组件与函数式的区别","children":[]},{"level":3,"title":"React 合成事件是什么?","slug":"react-合成事件是什么","link":"#react-合成事件是什么","children":[]},{"level":3,"title":"React HOC 是什么?有什么作用?","slug":"react-hoc-是什么-有什么作用","link":"#react-hoc-是什么-有什么作用","children":[]},{"level":3,"title":"useState 是异步的还是同步的?","slug":"usestate-是异步的还是同步的","link":"#usestate-是异步的还是同步的","children":[]},{"level":3,"title":"useEffect 与 useLayoutEffect 的区别?","slug":"useeffect-与-uselayouteffect-的区别","link":"#useeffect-与-uselayouteffect-的区别","children":[]}],"relativePath":"caseInterview/react.md","lastUpdated":1677481506000}'),l={name:"caseInterview/react.md"},r=i('<h3 id="react17-0-生命周期函数" tabindex="-1">React17.0 生命周期函数? <a class="header-anchor" href="#react17-0-生命周期函数" aria-hidden="true">#</a></h3><ul><li>constructor:组件的构造函数,在初始化调用,只会调用一次。一般在此函数完成一些初始化工作,例如初始化 state、绑定事件 this 等等操作。</li><li>static getDerivedStateFromProps:组件 render 之前调用,在初次挂载和后续更新都会调用。它是一个静态方法,它可以返回一个对象来更新 state,如果返回 null 则不更新任何内容。</li><li>render:组件渲染元素时执行,一旦组件所依赖的数据发生变化就会执行此函数。</li><li>componentDidMount:组件挂载到页面时执行,在 render 函数之后执行,只会执行一次,在此函数可以完成网络请求等操作。</li><li>shouldComponentUpdate:组件更新数据前执行,它返回一个布尔值,用于控制组件是否重新渲染。</li><li>getSnapshotBeforeUpdate:此钩子函数在 render 函数之后 componentDidUpdate 之前执行,它的返回值可以将作为 componentDidUpdate 钩子函数的第三个参数。</li><li>componentDidUpdate:组件更新数据时执行,此钩子函数在 getSnapshotBeforeUpdate 后调用,第三个的参数的值来源于 getSnapshotBeforeUpdate 钩子函数返回的值。</li><li>componentWillUnmount:组件在销毁卸载时执行,可以在此函数可以清除定时器,释放资源等操作。</li><li>static getDerivderStateFromError:此生命周期会在渲染阶段后代组件抛出错误后被调用,它将抛出的错误作为参数,并返回一个值以更新 state。</li><li>componentDidCatch:此生命周期在后代组件抛出错误后被调用。</li></ul><p>组件的生命周期分为挂载、更新、卸载、错误处理 4 个过程,对应的生命周期:</p><ul><li>挂载相关钩子函数:constructor、static getDerivedStateFromProps、render、componentDidMount。</li><li>更新相关钩子函数:static getDerivedStateFromProps、shouldComponentUpdate、render、getSnapshotBeforeUpdate、componentDidUpdate。</li><li>卸载相关钩子函数:componentWillUnmount。</li><li>错误处理相关钩子函数:static getDerivderStateFromError、componentDidCatch。</li></ul><h3 id="组件通讯方式有哪些" tabindex="-1">组件通讯方式有哪些? <a class="header-anchor" href="#组件通讯方式有哪些" aria-hidden="true">#</a></h3><ul><li>通过 Props 父传子。</li><li>通过 Propst 提供回调函数方式子改父。</li><li>通过 Ref 获取组件实例。</li><li>通过 Context 实现多层级组件通讯。</li><li>基于发布订阅模式实现多层级组件通讯。</li><li>使用第三方状态管理库进行多层级组件通讯。</li><li>浏览器存储机制。例如 cookie、localStorage、SessionStorage、IndexDB。</li></ul><h3 id="class-组件与函数式的区别" tabindex="-1">class 组件与函数式的区别? <a class="header-anchor" href="#class-组件与函数式的区别" aria-hidden="true">#</a></h3><ul><li>类组件因为需要创建组件的实例,且不能销毁,性能开销大;函数式组件不会被实例化,整体渲染性能得到提升。</li><li>类组件可以访问 this 和生命周期函数;函数式组件无法访问 this 且没有生命周期函数,但函数式组件可以通过 hooks 访问生命周期函数。</li><li>类组件属于状态组件,组件内部可以维护组件的 state;而函数式组件属于无状态组件,数据来源于 props。</li></ul><h3 id="react-合成事件是什么" tabindex="-1">React 合成事件是什么? <a class="header-anchor" href="#react-合成事件是什么" aria-hidden="true">#</a></h3><h3 id="react-hoc-是什么-有什么作用" tabindex="-1">React HOC 是什么?有什么作用? <a class="header-anchor" href="#react-hoc-是什么-有什么作用" aria-hidden="true">#</a></h3><h3 id="usestate-是异步的还是同步的" tabindex="-1">useState 是异步的还是同步的? <a class="header-anchor" href="#usestate-是异步的还是同步的" aria-hidden="true">#</a></h3><h3 id="useeffect-与-uselayouteffect-的区别" tabindex="-1">useEffect 与 useLayoutEffect 的区别? <a class="header-anchor" href="#useeffect-与-uselayouteffect-的区别" aria-hidden="true">#</a></h3>',12),c=[r];function s(o,n,d,h,u,p){return a(),t("div",null,c)}const _=e(l,[["render",s]]);export{m as __pageData,_ as default};
