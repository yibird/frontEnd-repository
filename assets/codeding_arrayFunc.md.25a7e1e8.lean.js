import{_ as s,c as n,o as a,a as l}from"./app.352f6789.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.创建数组的几种方式","slug":"_1-创建数组的几种方式","link":"#_1-创建数组的几种方式","children":[{"level":3,"title":"1.1 基于字面量和 Array 构造函数创建数组","slug":"_1-1-基于字面量和-array-构造函数创建数组","link":"#_1-1-基于字面量和-array-构造函数创建数组","children":[]},{"level":3,"title":"1.2 基于 Array.of()创建数组","slug":"_1-2-基于-array-of-创建数组","link":"#_1-2-基于-array-of-创建数组","children":[]},{"level":3,"title":"1.3 基于 Array.from()创建数组","slug":"_1-3-基于-array-from-创建数组","link":"#_1-3-基于-array-from-创建数组","children":[]}]},{"level":2,"title":"2.手写 Array 原型函数","slug":"_2-手写-array-原型函数","link":"#_2-手写-array-原型函数","children":[{"level":3,"title":"2.1 手写 Array.prototype.forEach()","slug":"_2-1-手写-array-prototype-foreach","link":"#_2-1-手写-array-prototype-foreach","children":[]},{"level":3,"title":"2.2 手写 Array.prototype.map()","slug":"_2-2-手写-array-prototype-map","link":"#_2-2-手写-array-prototype-map","children":[]},{"level":3,"title":"2.3 手写 Array.prototype.reduce()","slug":"_2-3-手写-array-prototype-reduce","link":"#_2-3-手写-array-prototype-reduce","children":[]}]},{"level":2,"title":"3.数组去重","slug":"_3-数组去重","link":"#_3-数组去重","children":[{"level":3,"title":"3.1 利用 Set 元素唯一去重","slug":"_3-1-利用-set-元素唯一去重","link":"#_3-1-利用-set-元素唯一去重","children":[]},{"level":3,"title":"3.2 利用 indexOf()或 includes()","slug":"_3-2-利用-indexof-或-includes","link":"#_3-2-利用-indexof-或-includes","children":[]},{"level":3,"title":"3.3 通过 filter()去重","slug":"_3-3-通过-filter-去重","link":"#_3-3-通过-filter-去重","children":[]},{"level":3,"title":"3.4 利用对象键名唯一去重","slug":"_3-4-利用对象键名唯一去重","link":"#_3-4-利用对象键名唯一去重","children":[]},{"level":3,"title":"3.5 利用 Map 结构 Key 不重复特性去重","slug":"_3-5-利用-map-结构-key-不重复特性去重","link":"#_3-5-利用-map-结构-key-不重复特性去重","children":[]},{"level":3,"title":"3.6 splice()+双重循环去重","slug":"_3-6-splice-双重循环去重","link":"#_3-6-splice-双重循环去重","children":[]}]},{"level":2,"title":"4.数组扁平化","slug":"_4-数组扁平化","link":"#_4-数组扁平化","children":[{"level":3,"title":"4.1 基于 flat 扁平化数组","slug":"_4-1-基于-flat-扁平化数组","link":"#_4-1-基于-flat-扁平化数组","children":[]},{"level":3,"title":"4.2 基于递归扁平化数组","slug":"_4-2-基于递归扁平化数组","link":"#_4-2-基于递归扁平化数组","children":[]}]},{"level":2,"title":"5.数组转树形结构","slug":"_5-数组转树形结构","link":"#_5-数组转树形结构","children":[{"level":3,"title":"5.1 通过循环数组转树形结构","slug":"_5-1-通过循环数组转树形结构","link":"#_5-1-通过循环数组转树形结构","children":[]},{"level":3,"title":"5.2 通过 reduce 转树形结构","slug":"_5-2-通过-reduce-转树形结构","link":"#_5-2-通过-reduce-转树形结构","children":[]}]},{"level":2,"title":"6.树形结构转数组","slug":"_6-树形结构转数组","link":"#_6-树形结构转数组","children":[{"level":3,"title":"6.1 通过递归遍历树形结构转数组","slug":"_6-1-通过递归遍历树形结构转数组","link":"#_6-1-通过递归遍历树形结构转数组","children":[]},{"level":3,"title":"6.2 通过 reduce 树形结构转数组","slug":"_6-2-通过-reduce-树形结构转数组","link":"#_6-2-通过-reduce-树形结构转数组","children":[]}]}],"relativePath":"codeding/arrayFunc.md","lastUpdated":1677480774000}'),p={name:"codeding/arrayFunc.md"},o=l("",59),e=[o];function t(c,r,y,F,D,C){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
