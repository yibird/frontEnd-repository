import{_ as s}from"./chunks/ast.fef9122b.js";import{_ as n,o as a,c as l,Q as p}from"./chunks/framework.2cee8389.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"caseInterview/engineering.md","filePath":"caseInterview/engineering.md","lastUpdated":1718591071000}'),o={name:"caseInterview/engineering.md"},e=p(`<h2 id="_1-什么是前端工程化" tabindex="-1">1.什么是前端工程化 <a class="header-anchor" href="#_1-什么是前端工程化" aria-label="Permalink to &quot;1.什么是前端工程化&quot;">​</a></h2><p>前端工程化是指通过工具和流程的优化,使前端开发更加高效和可维护。它可以涉及到各种不同的方面,包括代码管理、脚手架工具、包管理工具、构建工具、自动化测试、代码质量检查、性能优化等等。前端工程化通常包括以下几个方面:</p><ul><li>代码管理。使用版本控制工具如 Git 或 SVN 等,协作开发和管理代码库,实现代码的版本控制、代码合并、代码回退等功能。</li><li>脚手架工具。前端脚手架是一个用于快速搭建前端项目的工具,它可以提供项目的基础结构、文件组织方式、开发规范等。脚手架通常集成了多个工具和框架,如 Webpack、Babel、ESLint 等,使用 Vue-cli、React Create App、Angular CLI 等脚手架可以降低搭建项目的门槛,提供标准化的项目结构和规范,有利于提升项目可维护性和稳定性。除此之外,脚手架可以快速进行项目初始化、构建、打包、测试、部署等操作。</li><li>包管理工具。使用 pnpm、yarn、npm 实现依赖安装、版本管理、依赖更新等操作。</li><li>构建工具。使用构建工具如 Vite、Webpack、Rollup 等,将多个代码文件打包成一个或多个可执行的文件,同时进行资源优化、压缩等操作,以提高页面加载速度和性能。</li><li>自动化测试。使用自动化测试工具如 Vitest、Jest、Mocha 等,实现自动化测试,以确保代码的质量和可靠性。</li><li>代码规范。使用代码质量检查工具如 ESLint、Prettier 等,检查代码规范、代码风格等问题,以确保代码的可读性和可维护性。使用 commitLint 检查 Git Commit 提交规范、使用 changeset 管理版本及更新日志。</li><li>性能优化。使用性能优化工具如 Lighthouse、PageSpeed Insights 等,对页面进行性能分析和优化,以提高页面的响应速度和用户体验。</li></ul><p>通过前端工程化的实践,可以提高前端开发的效率和质量,同时也可以减少人为错误和重复工作,从而使团队更加高效和协作。</p><h2 id="npm-install-安装依赖的过程" tabindex="-1">npm install 安装依赖的过程? <a class="header-anchor" href="#npm-install-安装依赖的过程" aria-label="Permalink to &quot;npm install 安装依赖的过程?&quot;">​</a></h2><p>当使用 npm install 安装依赖时,npm 会执行以下几个步骤:</p><ul><li>解析依赖。npm 首先会解析项目的 package.json 文,查找需要安装的依赖和版本号,以及它们的依赖关系,即 dependencies 和 devDependencies。npm 会根据依赖的类型(dependencies 还是 devDependencies)来决定是否将依赖安装到生产环境还是开发环境中。</li><li>下载依赖。npm 会从 npm 的官方 registry 中下载所有需要安装的依赖包,以及这些依赖包的所有依赖项。</li><li>安装依赖。npm 会将下载的所有依赖包安装到项目的 node_modules 目录中。如果依赖包已经存在于 node_modules 中,npm 会检查它们的版本是否满足要求。如果版本不符合要求,npm 会尝试更新依赖包的版本。</li><li>执行钩子。npm 会执行 preinstall、postinstall、preuninstall、postuninstall 钩子,以及 prepublish 和 prepare 钩子。</li><li>生成 package-lock.json。npm 会生成一个 package-lock.json 文件,用于锁定依赖包的版本号,以保证在不同的机器上安装依赖时使用相同的版本。</li><li>执行依赖命令。最后,npm 会执行依赖包的 bin 命令,以确保依赖包已经正确地安装并可用。</li></ul><h2 id="pnpm-对比-npm、yarn-有哪些优点" tabindex="-1">pnpm 对比 npm、yarn 有哪些优点? <a class="header-anchor" href="#pnpm-对比-npm、yarn-有哪些优点" aria-label="Permalink to &quot;pnpm 对比 npm、yarn 有哪些优点?&quot;">​</a></h2><ul><li>节省磁盘空间并提升安装速度。</li><li>更严格高效。node_modules 中的文件是从一个单一的可内容寻址的存储中链接过来的,代码无法访问任意包。</li><li>内置支持 monorepo。pnpm 通过 workspace 天然内置支持 monorepo。</li></ul><h3 id="节省磁盘空间并提升安装速度" tabindex="-1">节省磁盘空间并提升安装速度 <a class="header-anchor" href="#节省磁盘空间并提升安装速度" aria-label="Permalink to &quot;节省磁盘空间并提升安装速度&quot;">​</a></h3><p>当使用 npm 或 yarn 时,如果有 100 个项目,并且所有项目都有一个相同的依赖包,那么,在硬盘上就需要保存 100 份该相同依赖包的副本。如果是使用 pnpm,依赖包将被存放在一个统一的位置,因此:</p><ul><li>如果对同一依赖包需要使用不同的版本,则仅有版本之间不同的文件会被存储起来。例如,如果某个依赖包包含 100 个文件,其发布了一个新 版本,并且新版本中只有一个文件有修改,则 pnpm update 只需要添加一个 新文件到存储中,而不会因为一个文件的修改而保存依赖包的 所有文件。</li><li>所有文件都保存在硬盘上的统一的位置。当安装软件包时,其包含的所有文件都会硬链接自此位置,而不会占用额外的硬盘空间。这可以在项目之间方便地共享相同版本的依赖包。</li></ul><h3 id="创建非扁平的-node-modules-目录" tabindex="-1">创建非扁平的 node_modules 目录 <a class="header-anchor" href="#创建非扁平的-node-modules-目录" aria-label="Permalink to &quot;创建非扁平的 node_modules 目录&quot;">​</a></h3><p>在 npm1 和 2 中,包是通过嵌套结构进行管理的,通过这种方式管理包,有多种缺点:</p><ul><li>依赖无法被共用,例如 bar 和 bar1 两个模块引用了相同版本的 foo,嵌套结构会安装两次 foo,造成磁盘空间的浪费,以及安装依赖时的低效。</li><li>依赖层级太深,导致文件路径过长,在不同的操作系统下有存在问题,在 windows 中复制目录会报错,路径长度超过限制。</li></ul><p>npm3 为了解决 npm1 和 2 的缺陷,通过对依赖进行扁平化处理,用于解决依赖无法被共用和依赖层级太深的问题,所有的依赖都被平铺在 node_modules 中的一级目录。这样在安装新的依赖时,根据 node 加载模块的路径查找算法,递归向上查找 node_modules 中的 package,这种查找核心简单来说是:</p><ul><li>优先在同级目录查找 node_modules 文件夹。</li><li>如果同级目录下没有 node_modules 或者没有找到相关版本的依赖,会继续在上一级目录中查找,解决了包重复安装的问题,本地开发项目大小得到了改善。</li></ul><p>随着 node_modules 扁平化的提出,可能会导致<strong>幽灵依赖</strong>和<strong>依赖分身</strong>。因为扁平化处理,把所有依赖都提升到 node_modules 的一级目录,导致在工作区未声明的包,可以直接被项目引用,这种现象被称为幽灵依赖(Ghost Dependency),幽灵依赖可能会导致以下问题:</p><ul><li>项目体积增大。幽灵依赖会占用项目的空间,导致项目体积增大,增加传输和加载的时间。</li><li>安全漏洞。幽灵依赖可能存在安全漏洞,因为它们没有得到更新或者升级。</li><li>构建速度下降。由于幽灵依赖需要被下载和处理,可能会导致构建速度变慢。</li></ul><p>以安装 express 为例:</p><ul><li>项目可以直接引用 debug,但是却不能规定 debug 版本,导致项目每次执行 install 发布上线存在隐患。</li><li>对于本地开发在 devDependence 声明的,依赖的依赖也被提升到 node_modules 的一级目录,在项目中未声明就引入,导致线上出现问题。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">web</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">project</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> express</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> debug@</span><span style="color:#79B8FF;">2.6</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">9</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">express</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">session@</span><span style="color:#79B8FF;">1.16</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">(dev)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">web</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">project</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> node_modules</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> express</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> debug@</span><span style="color:#005CC5;">2.6</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">express</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">session@</span><span style="color:#005CC5;">1.16</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">(dev)</span></span></code></pre></div><p>因为扁平化处理会提升包所在目录层级,但是存在同一个包的不同版本,npm 会选择一个版本提升到 node_modules 一级目录,其他版本嵌套安装,这样做会导致在项目中引用 C 和 D 的时候,是使用两个 B 的实例,从而造成依赖分身。依赖分身在一些边界情况就会导致项目的崩溃(typescript 和 Webpack 都有可能因此出错,所以只能内部做兼容)。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">web</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">project</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">1.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">1.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">1.0</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">2.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">D</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">1.0</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">2.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">web</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">project</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> node_modules</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">1.0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">B</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">1.0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">1.0</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> node_modules</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">B</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">2.0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">D</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">1.0</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> node_modules</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">B</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">2.0</span></span></code></pre></div><p>在 pnpm 中通过自动硬链接(hard link)和软链接(sybolic link)来实现 npm 模块的管理,从而避免幽灵依赖和依赖分身的问题。pnpm 安装管理时并不会像 npm 将所有依赖都扁平化管理,而是通过软链的形式链接到.pnpm 内部,再去详细管理依赖的版本,从而一并解决幽灵依赖和依赖分身。在.pnpm 内部也是平铺的,但是是允许不同版本的依赖平铺在一个层级,同时对于 express 诸多依赖,也是直接软链到平铺的模块中。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">web</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">project</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> express </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> .pnpm</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">express@</span><span style="color:#79B8FF;">3.20</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">express</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> .pnpm</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> express@</span><span style="color:#79B8FF;">3.20</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> basic</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">auth </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> ..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">basic</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">auth@</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">basic</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">auth</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> commander </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> ..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">commander@</span><span style="color:#79B8FF;">2.6</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">commander</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">web</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">project</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> node_modules</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> express </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> .pnpm</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">express@</span><span style="color:#005CC5;">3.20</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">express</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> .pnpm</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> express@</span><span style="color:#005CC5;">3.20</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> node_modules</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> basic</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">auth </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">basic</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">auth@</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">basic</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">auth</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> commander </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">commander@</span><span style="color:#005CC5;">2.6</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">commander</span></span></code></pre></div><h2 id="常见的模块化方案有哪些" tabindex="-1">常见的模块化方案有哪些？ <a class="header-anchor" href="#常见的模块化方案有哪些" aria-label="Permalink to &quot;常见的模块化方案有哪些？&quot;">​</a></h2><h3 id="commonjs-与-esmodule-的区别" tabindex="-1">CommonJS 与 ESModule 的区别？ <a class="header-anchor" href="#commonjs-与-esmodule-的区别" aria-label="Permalink to &quot;CommonJS 与 ESModule 的区别？&quot;">​</a></h3><p>CommonJS 和 ESModule 是 JavaScript 中两种不同的模块系统。其区别如下：</p><ul><li><strong>语法不同</strong>。CommonJS 使用<code>require()</code>和<code>module.exports</code>来导入和导出模块,而 ESModule 使用<code>import</code>和<code>export</code>语句。</li><li><strong>加载方式不同</strong>。CommonJS 是同步加载模块,即当使用<code>require()</code>加载一个模块时,会立即执行该模块的代码,并返回该模块的<code>exports</code>对象。而 ESModule 是异步加载模块,即在使用 import 语句加载一个模块时,不会立即执行该模块的代码,而是在需要使用该模块时再执行。</li><li><strong>静态解析不同</strong>。由于 ESModule 采用静态解析,因此在编译时就可以确定导入的模块,而 CommonJS 则是动态解析,需要在运行时才能确定导入的模块。由于 ESModule 采用静态分析,因此可以在编译阶段确定哪些代码未被使用,从而实现 tree shaking(摇树)优化,去除未使用的代码。</li><li><strong>变量绑定不同</strong>。ESModule 中导入的变量是只读的,不能被修改,而 CommonJS 导入的变量是可以被修改的。</li><li><strong>应用场景不同</strong>。CommonJS 主要应用于服务器端的 Node.js 环境中,而 ESModule 主要应用于浏览器端的 Web 应用程序中。</li></ul><p>需要注意的是,由于 CommonJS 和 ESModule 有不同的语法和特性,因此它们之间的模块无法直接互相引用,需要通过转换工具进行转换。例如,Babel 可以将 ESModule 转换成 CommonJS,而 Webpack 可以将 CommonJS 转换成 ESModule。</p><h2 id="commonjs-规范-require-的过程" tabindex="-1">CommonJS 规范 require()的过程? <a class="header-anchor" href="#commonjs-规范-require-的过程" aria-label="Permalink to &quot;CommonJS 规范 require()的过程?&quot;">​</a></h2><h2 id="什么是-ast" tabindex="-1">什么是 AST? <a class="header-anchor" href="#什么是-ast" aria-label="Permalink to &quot;什么是 AST?&quot;">​</a></h2><p>AST(Abstract Syntax Tree),抽象语法树,是一种数据结构,它用于表示编程语言的抽象语法结构。在编程语言中,源代码是由一系列字符组成的,计算机并不能直接理解它们,需要将其转换成抽象语法树,以便计算机能够理解和处理它们。</p><p>抽象语法树可以看作是源代码的抽象语法结构的一种中间表示形式。在抽象语法树中,每个节点表示一个语法元素,例如函数、变量、表达式、语句等等。节点之间的关系则表示语法结构的嵌套关系,例如函数包含参数和函数体,函数体又包含多个语句,语句包含多个表达式等等。抽象语法树在编译器、静态分析、代码优化、代码生成等领域中都有广泛的应用,例如 Babel(前端编译器)、Webpack(打包器)、ESLint(JS Lint 工具)、Perttier(代码格式化工具)等。</p><h2 id="如何实现一个-compiler" tabindex="-1">如何实现一个 Compiler? <a class="header-anchor" href="#如何实现一个-compiler" aria-label="Permalink to &quot;如何实现一个 Compiler?&quot;">​</a></h2><p>一个完整的编译器整体执行过程可以分为三个步骤:</p><ul><li><strong>Parsing(解析)</strong>。这个过程要经词法分析、语法分析、构建 AST（抽象语法树）一系列操作。</li><li><strong>Transformation(转化)</strong>。这个过程就是将上一步解析后的内容,按照编译器指定的规则进行处理,形成一个新的表现形式。</li><li><strong>Code Generation(代码生成)</strong>。将上一步处理好的内容转化为新的代码。</li></ul><p><img src="`+s+`" alt="prototype"> 以 lisp 的函数调用编译成类似 C 的函数为例:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">LISP</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">代码</span><span style="color:#E1E4E8;">: (add </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> (subtract </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">代码</span><span style="color:#E1E4E8;">:  </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">subtract</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#B392F0;">释义</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> （ </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">LISP</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">代码</span><span style="color:#24292E;">: (add </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> (subtract </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#005CC5;">C</span><span style="color:#24292E;">    </span><span style="color:#6F42C1;">代码</span><span style="color:#24292E;">:  </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">subtract</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6F42C1;">释义</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> （ </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="compiler-流程介绍" tabindex="-1">Compiler 流程介绍 <a class="header-anchor" href="#compiler-流程介绍" aria-label="Permalink to &quot;Compiler 流程介绍&quot;">​</a></h3><h4 id="parsing-过程" tabindex="-1">Parsing 过程 <a class="header-anchor" href="#parsing-过程" aria-label="Permalink to &quot;Parsing 过程&quot;">​</a></h4><p>解析过程主要分为词法分析和语法分析两个步骤:</p><ul><li>词法分析:词法分析是使用 tokenizer(分词器)或者 lexer(词法分析器),将源码拆分成 tokens,tokens 是一个放置对象的数组,其中的每一个对象都可以看做是一个单元(数字,标签,标点,操作符...)的描述信息。例如对&quot;你是猪&quot;进行词法分析就可以得到主谓宾词语,对<code>(add 2 (subtract 4 2))</code>进行词法分析后得到:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;paren&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;add&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;paren&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;subtract&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;4&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;paren&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { type: </span><span style="color:#9ECBFF;">&quot;paren&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;paren&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;add&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;paren&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;subtract&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;paren&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { type: </span><span style="color:#032F62;">&quot;paren&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><ul><li>语法解析:将词法分析的结果转化为抽象语法树(AST),并检查其语法是否正确。语法分析会将 tokens 重新整理成语法相互关联的表达形式,这种表达形式一般被称为中间层或者 AST(抽象语法树)。对<code>(add 2 (subtract 4 2))</code>进行语法解析后得到的 AST:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Program&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#9ECBFF;">&#39;CallExpression&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;add&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    params:</span></span>
<span class="line"><span style="color:#E1E4E8;">      [{</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;NumberLiteral&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        value: </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;CallExpression&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;subtract&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        params: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: </span><span style="color:#9ECBFF;">&#39;NumberLiteral&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          value: </span><span style="color:#9ECBFF;">&#39;4&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: </span><span style="color:#9ECBFF;">&#39;NumberLiteral&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          value: </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        }]</span></span>
<span class="line"><span style="color:#E1E4E8;">      }]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Program&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">: [{</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#032F62;">&#39;CallExpression&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;add&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    params:</span></span>
<span class="line"><span style="color:#24292E;">      [{</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&#39;NumberLiteral&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        value: </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&#39;CallExpression&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;subtract&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        params: [{</span></span>
<span class="line"><span style="color:#24292E;">          type: </span><span style="color:#032F62;">&#39;NumberLiteral&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          value: </span><span style="color:#032F62;">&#39;4&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        }, {</span></span>
<span class="line"><span style="color:#24292E;">          type: </span><span style="color:#032F62;">&#39;NumberLiteral&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          value: </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        }]</span></span>
<span class="line"><span style="color:#24292E;">      }]</span></span>
<span class="line"><span style="color:#24292E;">  }]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="compiler-实现" tabindex="-1">Compiler 实现 <a class="header-anchor" href="#compiler-实现" aria-label="Permalink to &quot;Compiler 实现&quot;">​</a></h3><p>根据 Compiler 的执行流程,Compiler 的实现分为以下四个步骤:</p><ul><li>生成 Tokens。</li><li>将生成好的 tokens 转化为 AST。</li><li>遍历和访问生成好的 AST。</li><li>将生成好的 AST 转化为新的 AST。</li><li>根据转化的 AST 生成目标代码。</li></ul><h4 id="生成-tokens" tabindex="-1">生成 Tokens <a class="header-anchor" href="#生成-tokens" aria-label="Permalink to &quot;生成 Tokens&quot;">​</a></h4><p>第一步是将输入代码解析为 tokens。这个过程需要 tokenzier(分词器)函数,整体思路就是通过遍历字符串的方式,对每个字符按照一定的规则进行<code>switch case</code>,最终生成 tokens 数组。</p><h2 id="什么是-babel" tabindex="-1">什么是 Babel? <a class="header-anchor" href="#什么是-babel" aria-label="Permalink to &quot;什么是 Babel?&quot;">​</a></h2><p>Babel 是一个 JavaScript 编译器,主要用于将 ECMAScript 2015+ 代码转换为当前和旧浏览器或环境中向后兼容的 JavaScript 版本,Babel 常用于语法转换(Transform syntax)、源代码转换(Source code transformations)、目标环境中缺少的 Polyfill 的场景。Babel 的执行流程分为解析、转换、生成三个步骤:</p><ul><li>解析阶段:Babel 首先会将输入的源代码解析成抽象语法树(AST)。这一步骤由 Babel 的解析器完成,将源代码转换为一种更易于处理的数据结构,即 AST。</li><li>转换(Transformation)阶段:在解析的基础上,Babel 将对 AST 进行转换。这个阶段涉及到一系列的插件,每个插件负责一种转换。插件可以修改、添加或删除 AST 中的节点,实现对源代码的不同转换。</li><li>代码生成(Code Generation)阶段:转换完成后,Babel 会将修改后的 AST 转换回字符串形式的代码。这个阶段由 Babel 的代码生成器完成,它会根据修改后的 AST 生成目标版本的 JavaScript 代码。例如生成 sourcemap(源码映射)有利于开发调试。</li></ul><h2 id="webpack-的打包流程" tabindex="-1">Webpack 的打包流程? <a class="header-anchor" href="#webpack-的打包流程" aria-label="Permalink to &quot;Webpack 的打包流程?&quot;">​</a></h2><p>Webpack 的打包流程可以分为以下几个步骤：</p><ul><li>解析配置文件:Webpack 会读取并解析配置文件（通常是 webpack.config.js 文件）,并根据配置生成一个 Compiler 对象。</li><li>读取入口文件:Webpack 根据配置中的入口文件,读取这些文件及其依赖的模块,并将它们组成一个依赖图。</li><li>解析模块依赖:Webpack 会根据模块之间的依赖关系,递归地解析它们的依赖,直到所有的依赖都被解析完毕。</li><li>加载模块:Webpack 会根据模块的路径,使用相应的 Loader 加载模块的源代码,并将其转换为 Webpack 可以处理的形式。</li><li>转换代码:Webpack 会根据配置中的插件,对加载的模块进行一系列的转换操作,比如压缩、合并、优化等。</li><li>生成代码:Webpack 会将所有模块转换后的代码合并成一个或多个文件,并输出到指定的输出目录中。</li></ul><h2 id="webpack-loader-和-plugin-的区别" tabindex="-1">Webpack Loader 和 Plugin 的区别? <a class="header-anchor" href="#webpack-loader-和-plugin-的区别" aria-label="Permalink to &quot;Webpack Loader 和 Plugin 的区别?&quot;">​</a></h2><p>Loader 和 Plugin 是 Webpack 的核心概念,两者区别如下:</p><ul><li>Loader:Loader 用于对模块的源代码进行转换,它直接影响到文件的加载和解析。例如,可以使用 Babel Loader 将 ES6+的代码转换为 ES5,或者使用 CSS Loader 加载和转换 CSS 文件。开发中常用的 Loader 如下: <ul><li>babel-loader:用于将新版本的 JavaScript 代码转换为旧版本的 JavaScript 代码,以确保在不同环境中运行。</li><li>css-loader 和 style-loader: 处理 CSS 文件,使其能够被 Webpack 识别和加载到应用中。</li><li>file-loader:处理图片、字体等文件,将它们复制到输出目录,并返回文件路径。</li><li>url-loader:类似于 file-loader,但可以根据文件大小将文件转换为 DataURL,减少 HTTP 请求。</li><li>sass-loader 和 less-loader:用于处理 Sass 和 Less 文件,将其编译为 CSS。</li><li>cache-loader:用于缓存文件的转换结果,以提高构建性能。</li><li>vue-loader:用于处理 Vue.js 的单文件组件(.vue 文件)。Vue.js 单文件组件将 HTML、CSS 和 JavaScript 封装在一个文件中,vue-loader 负责将这种文件进行解析和转换,使得它们可以被 Webpack 正确地加载和使用。</li></ul></li><li>Plugin:Plugin 用于扩展 Webpack 的功能,执行更广泛的任务。它可以在 Webpack 运行的不同阶段执行各种任务,比如优化、压缩、代码分割、模块热替换等。</li></ul><h3 id="如何实现一个-loader" tabindex="-1">如何实现一个 Loader? <a class="header-anchor" href="#如何实现一个-loader" aria-label="Permalink to &quot;如何实现一个 Loader?&quot;">​</a></h3><p>在 Webpack 中 Loader 是一个普通函数,该函数接收上一个 Loader 处理后的源码内容,并返回当前 Loader 处理后的源码内容。</p><p>创建 Loader:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// source表示上一个Loader处理后的文件源内容</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对源代码进行处理</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(source);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 实际的转换逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 可以使用正则表达式、字符串替换、AST解析等方式进行处理</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> source.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// source表示上一个Loader处理后的文件源内容</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对源代码进行处理</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(source);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 实际的转换逻辑</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 可以使用正则表达式、字符串替换、AST解析等方式进行处理</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> source.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注册 Loader:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 匹配需要使用该Loader的文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: </span><span style="color:#9ECBFF;">&quot;path/to/custom-loader.js&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定Loader的路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 可选,排除的文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 匹配需要使用该Loader的文件</span></span>
<span class="line"><span style="color:#24292E;">        use: </span><span style="color:#032F62;">&quot;path/to/custom-loader.js&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 指定Loader的路径</span></span>
<span class="line"><span style="color:#24292E;">        exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 可选,排除的文件夹</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="如何实现一个-plugin" tabindex="-1">如何实现一个 Plugin? <a class="header-anchor" href="#如何实现一个-plugin" aria-label="Permalink to &quot;如何实现一个 Plugin?&quot;">​</a></h3><p>在 Webpack 中,Plugin 是一个 JavaScript 命名函数或 JavaScript 类,Plugin 需要提供 apply()函数,该方法在 Webpack 构建过程中被调用,允许在不同的生命周期钩子上执行自定义任务。</p><p>创建 Plugin:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 自定义Plugin</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomPlugin</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// options表示插件的配置参数,可选</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Plugin需要提供一个apply(),该方法在 Webpack 构建过程中被调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在compiler对象上注册Webpack生命周期钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.emit.</span><span style="color:#B392F0;">tapAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CustomPlugin&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 执行自定义处理逻辑...</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 调用回调函数通知Webpack继续构建</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CustomPlugin;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 自定义Plugin</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomPlugin</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// options表示插件的配置参数,可选</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Plugin需要提供一个apply(),该方法在 Webpack 构建过程中被调用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">compiler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在compiler对象上注册Webpack生命周期钩子</span></span>
<span class="line"><span style="color:#24292E;">    compiler.hooks.emit.</span><span style="color:#6F42C1;">tapAsync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CustomPlugin&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">compilation</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 执行自定义处理逻辑...</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 调用回调函数通知Webpack继续构建</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CustomPlugin;</span></span></code></pre></div><p>注册 Plugin:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 导入自定义插件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CustomPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./path/to/CustomPlugin&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/* 插件配置参数 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 导入自定义插件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CustomPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./path/to/CustomPlugin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/* 插件配置参数 */</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="webpack-的优化策略有哪些" tabindex="-1">Webpack 的优化策略有哪些? <a class="header-anchor" href="#webpack-的优化策略有哪些" aria-label="Permalink to &quot;Webpack 的优化策略有哪些?&quot;">​</a></h2><ul><li>量化分析。首先通过 speed-measure-webpack-plugin 插件量化分析各个 plugin 和 loader 打包时所花费的时间,通过量化指标可以看出优化前与优化后的对比。</li><li>可以用过 exclude 或 include 配置来确保转译尽可能少的文件。通过 exclude 排除无需打包的目录(例如 exclude:/\\node_modules/排除 node_modules 目录),exclude 的优先级高于 include(优先匹配 exclude)。include 用于包含指定目录下的模块进行打包,一般会将 include 配置为 src,建议使用 include,避免使用 exclude,指定 include 大分部情况比指定 exclude 构建效果要好。</li><li>使用 cache-loader。对于一些性能开销比较大的 loader 之前添加 cache-loader,将结果缓存到磁盘中,能大幅度提升性能,默认缓存保存在 node_modules/.cache/cache-loader 目录下。</li><li>使用 happypack 插件进行多线程打包。happypack 是一个通过多线程来提升 webpack 打包速度的工具</li><li>使用 thread-loader 进行多线程打包。除了使用 Happypack 提升打包速度,也可以使用 thread-loader,把 thread-loader 放置在其他 loader 之前,那么放置在这个 loader 之后的 loader 就会在一个单独的 worker 池中运行。</li><li>使用 terser-webpack-plugin 和 mini-css-extract-plugin 分别对 JS 和 CSS 资源压缩。资源压缩包括 JS 与 CSS 文件压缩,terser-webpack-plugin 是一个用于压缩 JS 资源的插件。压缩 CSS 前首先使用 mini-css-extract-plugin 插件将 CSS 提取出来,然后使用 optimize-css-assets-webpack-plugin 进行压缩。</li><li>使用 noParse 标识模块不进行转化与解析。如果一些第三方模块没有 AMD/CommonJS 规范版本,这对打包影响还是挺大的,我们可以使用 noParse 来标识这个模块,这个 webpack 会引入这些模块,但是不进行转化和解析,从而提升 webpack 的构建性能,例如 jquery、lodash。noParse 属性的值可是一个正则表达式或一个 function。</li><li>IgnorePlugin 忽略第三方依赖。IgnorePlugin 是 webpack 的内置插件,作用是忽略第三方依赖指定目录。例如: moment (2.24.0 版本) 会将所有本地化内容和核心功能一起打包,可以使用 IgnorePlugin 在打包时忽略本地化内容。</li><li>使用 externals 从 bundle 排除依赖项。xternals(外部扩展)配置选项提供了「从输出的 bundle 中排除依赖」的方法。防止将某些 import 的包(package)打包到 bundle 中,而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。</li><li>拆分 bundle。如果所有的 js 文件都打包成一个 JS 文件,这会导致最终生成的 js 文件体积很大,这个时候就要考虑拆分 bundle 了。DllPlugin 和 DLLReferencePlugin 可以实现拆分 bundles,并且可以大幅度提升构建速度,DllPlugin 和 DLLReferencePlugin 都是 webpack 的内置模块。</li><li>抽离公共代码。optimization.SplitChunks(简称 SplitChunks)是 webpack4 为了改进 CommonsChunk-Plugin 而重新设计和实现的代码分片特性。webpack4 之前自带 CommonsChunk-Plugin 插件用于处理代码分片,webpack4 后使用 SplitChunks,SplitChunks 相比 CommonsChunk-Plugin 功能更加强大,操作更加简单。</li><li>webpack-bundle-analyzer 监控 bundle 体积,根据分析结果进一步优化。</li><li>尽量使用 ESModule。ES6 Module 依赖关系的构建是在代码编译时而非运行时,基于这一特性 webpack 提供了 tree shaking(摇树)功能,它可以在打包过程中检测工程中未使用过的模块,这部分代码将不会被执行,因此被称为&quot;死代码&quot;。webpack 会对这部分代码进行标记,并在资源压缩时将它们从最终的 bundle 中去掉。</li><li>使用 swc-loader 或 esbuild-loader 提升打包速度。JS 是一门动态采用单线程模型的脚本语言,性能成为了 JS 的瓶颈,为了追求更极致的性能前端工程化建设基本朝 rust 和 go 语言方向偏移,rust 和 go 能大幅度提升程序执行效率。swc 就是基于 rust 开发的一款对标 babel 的模块打包器,esbuild 是基于 go 语言实现的一款打包器,它们基于更底层的静态语言,打包构建的速度非常快。</li></ul><h2 id="vite-的打包流程" tabindex="-1">Vite 的打包流程? <a class="header-anchor" href="#vite-的打包流程" aria-label="Permalink to &quot;Vite 的打包流程?&quot;">​</a></h2><h2 id="如何实现一个-vite-plugin" tabindex="-1">如何实现一个 Vite Plugin? <a class="header-anchor" href="#如何实现一个-vite-plugin" aria-label="Permalink to &quot;如何实现一个 Vite Plugin?&quot;">​</a></h2><h2 id="vite-plugin-的钩子函数有哪些" tabindex="-1">Vite Plugin 的钩子函数有哪些? <a class="header-anchor" href="#vite-plugin-的钩子函数有哪些" aria-label="Permalink to &quot;Vite Plugin 的钩子函数有哪些?&quot;">​</a></h2><h2 id="vite-的优化策略有哪些" tabindex="-1">Vite 的优化策略有哪些? <a class="header-anchor" href="#vite-的优化策略有哪些" aria-label="Permalink to &quot;Vite 的优化策略有哪些?&quot;">​</a></h2><ul><li>查看模块依赖分析。分析依赖模块的大小占比,可以有针对性对某些模块进行体积优化。rollup-plugin-visualizer 是一个模块依赖分析插件,通过该插件可以对模块依赖进行构建分析。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 安装</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rollup-plugin-visualizer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 安装</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rollup-plugin-visualizer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><ul><li>分包策略。分包是一种将不常更新的文件进行单独打包的优化策略。vite 在打包时,会在 bundle 添加一个 hash 值,该 hash 与文件内容相关,当文件内容发生变化,hash 值也会发生变化,这样做能保证文件发生变化时浏览器能够请求到最新资源。对于不常变化的文件,无法利用浏览器缓存提升加载效率(请求相同资源会命中浏览器缓存),可以借助分包机制将不常变化的文件进行单独打包,例如将第三方包进行独立打包。在 vite 中分包依赖于 rollup 的 output.manualChunks,当该选项值为函数形式时,每个被解析的模块都会经过该函数处理。如果函数返回字符串,那么该模块及其所有依赖将被添加到以返回字符串命名的自定义 chunk 中。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vite&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    minify: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在这里配置打包时的rollup配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    rollupOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">manualChunks</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (id.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node_modules&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 打包后生成一个vendor.xxxxx.js</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vendor&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vite&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  build: {</span></span>
<span class="line"><span style="color:#24292E;">    minify: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在这里配置打包时的rollup配置</span></span>
<span class="line"><span style="color:#24292E;">    rollupOptions: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">manualChunks</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (id.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;node_modules&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 打包后生成一个vendor.xxxxx.js</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vendor&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>经过分包策略后,可能会导致打包后的体积过大,此时可以使用<code>vite-plugin-compression2</code>插件进行打包压缩。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vite-plugin-compression2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vite-plugin-compression2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><ul><li>开启 treeshaking。treeshaking 也被称为 &quot;摇树优化&quot;。简单来说,在保证代码运行结果不变的前提下,去除无用的代码,从而减少打包后产物的体积大小。但是使用 treeshaking 机制时,必须要保证使用 ESModule 模块化方式组织代码,因为 ESModule 使用静态分析,可以检测无使用的死代码。</li><li>开启 gzip 压缩。gzip 是一种使用非常普遍的压缩格式。使用 gzip 压缩可以大幅减小代码体积,提升网络性能(对于文本内容压缩效率更好)。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 安装 vite gzip插件</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vite-plugin-compression</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 安装 vite gzip插件</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vite-plugin-compression</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><ul><li>开启 CDN 加速。内容分发网络(Content Delivery Network,简称 CDN)允许用户从最近的服务器请求资源,提升网络请求的响应速度。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 安装Vite CDN加速插件</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vite-plugin-cdn-import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 安装Vite CDN加速插件</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vite-plugin-cdn-import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><ul><li>使用图片压缩。当项目存在大量图片或大图片时,除了使用体积更小的图片格式外(例如 webp),此时还可以使用图片压缩。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 安装图片压缩插件</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vite-plugin-imagemin</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 安装图片压缩插件</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vite-plugin-imagemin</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div>`,91),c=[e];function t(r,E,y,i,u,d){return a(),l("div",null,c)}const C=n(o,[["render",t]]);export{h as __pageData,C as default};
