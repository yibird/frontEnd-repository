import{_ as s,o as a,c as n,O as l}from"./chunks/framework.0b8e562d.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/scope.md","filePath":"js/scope.md","lastUpdated":1684845191000}'),o={name:"js/scope.md"},p=l(`<h2 id="执行上下文与作用域" tabindex="-1">执行上下文与作用域 <a class="header-anchor" href="#执行上下文与作用域" aria-label="Permalink to &quot;执行上下文与作用域&quot;">​</a></h2><p>执行上下文是 JS 中的核心概念,执行上下文决定了当前环境下能够访问哪些变量与函数,JS 中执行上下文分为如下三种:</p><ul><li>全局执行上下文:只有一个,浏览器中的全局对象就是 window 对象,this 指向这个全局对象。</li><li>函数执行上下文:存在无数个,只有在函数被调用的时候才会被创建,每次调用函数都会创建一个新的执行上下文。每当调用函数时 JS 引擎都会为该函数创建一个新的函数执行上下文,并将该函数的执行上下文推到一个执行下文栈中,函数执行完毕后,执行上下文栈会弹出该函数上下文,将控制权返回给之前的执行上下文。</li><li>eval 函数执行上下文:指的是运行在 eval 函数中的代码。</li></ul><p>执行上下文的创建分为创建阶段和执行阶段,执行上下文创建阶段流程如下:</p><ul><li>确定 this 的值,也被称为 This Binding。不同执行上下文 this 的指向也不同,在全局执行上下文件中,浏览器环境 this 指向 window 对象,Node 环境指向该文件的 module 对象。在函数执行上下中,this 的指向取决于函数的调用方式,函数的调用方式分为:默认绑定、隐式绑定、显式绑定（硬绑定）、new 绑定、箭头函数。</li><li>创建 LexicalEnvironment(词法环境)。</li><li>创建 VariableEnvironment(变量环境)。</li></ul><h2 id="作用域提升" tabindex="-1">作用域提升 <a class="header-anchor" href="#作用域提升" aria-label="Permalink to &quot;作用域提升&quot;">​</a></h2><p>作用域提升(Hoisting)是指在 JavaScript 解释器中,在代码执行前将变量和函数声明提升到其所在作用域的顶部的过程,只有声明才会被提升,而赋值操作并不会被提升。在 ES6 之前,JavaScript 并没有块级作用域,因此在块内部声明的变量和函数都会被提升到所在的函数或全局作用域中。在 ES6 中引入了 let 和 const 关键字,它们声明的变量有块级作用域,不会被提升。作用域提升的存在可以让代码更易于理解,但也可能会导致一些错误。因此,编写 JavaScript 代码时应该注意声明变量和函数的顺序，避免出现意料之外的行为。<strong>作用域提升分为变量提升和函数提升,其中函数提升的优先级高于变量提升</strong>。</p><h3 id="变量提升" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-label="Permalink to &quot;变量提升&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 变量提升,在变量声明之前使用变量会产生undefined值</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/** 上面代码等同于如下代码  */</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="函数提升" tabindex="-1">函数提升 <a class="header-anchor" href="#函数提升" aria-label="Permalink to &quot;函数提升&quot;">​</a></h3><p>注意:函数表达式并不会被提升,只有函数声明才会被提升。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/** 上面代码等同于如下代码 */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span></code></pre></div><p>在 JavaScript 中,函数声明的优先级高于变量声明。也就是说,如果在作用域中同时存在同名的函数声明和变量声明,那么函数声明会被提升到作用域顶部,而变量声明会被提升,但不覆盖已经存在的同名函数声明。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 函数声明的优先级高于变量声明,因此 foo 最终被赋值为函数</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出&quot;Hello&quot;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,14),e=[p];function t(c,r,i,y,F,D){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
