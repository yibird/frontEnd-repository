import{_ as e,o as a,c as o,Q as t}from"./chunks/framework.2cee8389.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"microFrontEnd/introduction.md","filePath":"microFrontEnd/introduction.md","lastUpdated":1718591071000}'),i={name:"microFrontEnd/introduction.md"},r=t('<p>随着前端技术的发展,单页面应用(SPA)变得越来越普及。然而,随着应用程序的规模和复杂性的增加,单一的前端代码库变得难以维护和扩展。大规模应用的开发、维护和部署面临以下挑战：</p><ul><li>代码库庞大:随着功能的增加,代码库变得庞大,构建时间和部署时间增加,开发效率降低。</li><li>团队协作困难:多个团队在同一个代码库中工作,容易导致合并冲突、依赖关系复杂化以及发布周期延长。</li><li>技术栈限制:单一的前端技术栈限制了团队选择最适合的技术来实现特定功能。</li><li>渐进式迁移:难以逐步迁移老旧的代码库到新的技术栈或架构,通常需要一次性大规模重构。</li></ul><p>为了应对这些挑战,微前端（Micro Frontends）概念应运而生。微前端借鉴了微服务分而治之的的思想,将前端应用拆分成多个独立的小应用,每个小应用可以由不同的团队开发、测试和部署,最终通过某种方式(例如,容器应用,也叫做基座应用)将它们组合成一个整体的用户界面。使用微前端具有如下优点:</p><ul><li>技术栈独立:不同的微前端应用可以使用不同的技术栈,允许团队选择最适合的工具和框架。</li><li>独立开发和部署:每个微前端应用可以独立开发、测试和部署,减少了不同团队之间的依赖和冲突。</li><li>提升可维护性和可扩展性:应用拆分为更小的部分,每个部分的复杂度降低,提高了代码的可维护性和可扩展性。</li></ul><h2 id="_1-使用微前端产生的问题" tabindex="-1">1.使用微前端产生的问题 <a class="header-anchor" href="#_1-使用微前端产生的问题" aria-label="Permalink to &quot;1.使用微前端产生的问题&quot;">​</a></h2><h2 id="_2-微前端四种主流实现方式" tabindex="-1">2.微前端四种主流实现方式 <a class="header-anchor" href="#_2-微前端四种主流实现方式" aria-label="Permalink to &quot;2.微前端四种主流实现方式&quot;">​</a></h2><h3 id="_2-1-iframe" tabindex="-1">2.1 iframe <a class="header-anchor" href="#_2-1-iframe" aria-label="Permalink to &quot;2.1 iframe&quot;">​</a></h3><h3 id="_2-2-web-components" tabindex="-1">2.2 web Components <a class="header-anchor" href="#_2-2-web-components" aria-label="Permalink to &quot;2.2 web Components&quot;">​</a></h3><h3 id="_2-3-single-spa" tabindex="-1">2.3 single-spa <a class="header-anchor" href="#_2-3-single-spa" aria-label="Permalink to &quot;2.3 single-spa&quot;">​</a></h3><h3 id="_2-4-module-federation" tabindex="-1">2.4 module Federation <a class="header-anchor" href="#_2-4-module-federation" aria-label="Permalink to &quot;2.4 module Federation&quot;">​</a></h3><p>模块联邦(Module Federation)是 Webpack 5 引入的一项新特性,旨在解决微前端架构中模块共享和依赖管理的问题。模块联邦允许多个独立构建和部署的应用程序(或模块)共享代码,从而实现更高效的代码复用和独立发布。</p>',11),n=[r];function l(d,s,c,_,h,m){return a(),o("div",null,n)}const f=e(i,[["render",l]]);export{p as __pageData,f as default};
