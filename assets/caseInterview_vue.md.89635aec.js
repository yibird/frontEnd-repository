import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8c2da384.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"caseInterview/vue.md","filePath":"caseInterview/vue.md","lastUpdated":1708966819000}'),p={name:"caseInterview/vue.md"},o=l(`<h2 id="_1-什么是-mvvm、mvc-架构" tabindex="-1">1.什么是 MVVM、MVC 架构? <a class="header-anchor" href="#_1-什么是-mvvm、mvc-架构" aria-label="Permalink to &quot;1.什么是 MVVM、MVC 架构?&quot;">​</a></h2><ul><li><p>MVVM 即 Model–View–ViewModel 是一个软件架构设计模式,其中 Model 表示数据模型,View 表示 UI 视图,ViewModel 表示 Model 与 View 之间的桥梁。当 Model 数据发生变化时 ViewModel 会通知对应的 View 重新渲染,当 View 发生变化时 ViewModel 也会通知 Model 发生变化。MVVM 将视图层与数据层进行分离,通过 ViewModel 层控制 View 的渲染与 Model 数据的变化,极大的提高了前端开发效率。虽然 Vue 没有完全遵循 MVVM 模型,但是 Vue 的设计也受到了它的启发。</p></li><li><p>MVC 即 Model-View-Controller 是一种软件架构模式,它将应用程序分为三个主要部分:模型(Model)、视图(View)和控制器(Controller):</p><ul><li>模型(Model):代表应用程序的数据和业务逻辑。它是应用程序中负责处理数据和数据操作的组件，包括数据存储、访问和更新等。</li><li>视图(View):代表应用程序的用户界面。它是应用程序中用户直接交互的部分,包括显示和呈现数据、响应用户输入等。</li><li>控制器(Controller):连接模型和视图。它是应用程序中的中间件,用于处理用户输入和数据操作,并根据需要更新视图。控制器接收来自视图的用户输入,并将请求转发给模型来更新数据。一旦模型被更新,控制器将更新视图以反映新的数据状态。</li></ul></li></ul><p>MVC 架构的优点是分离了应用程序的不同方面,从而使得应用程序更容易维护、扩展和重用。例如,如果需要更改应用程序的用户界面,可以只修改视图部分,而不需要改变模型和控制器。同样,如果需要更新数据操作,可以只修改模型部分,而不需要修改视图和控制器。React 是一个典型的 MVC 架构库。</p><h2 id="_2-vue-生命周期" tabindex="-1">2.Vue 生命周期 <a class="header-anchor" href="#_2-vue-生命周期" aria-label="Permalink to &quot;2.Vue 生命周期&quot;">​</a></h2><p>Vue2 采用 Options API 开发组件,组件生命周期定义在导入的组件对象中;Vue3 支持 Composition 和 Options API 开发组件,在 Composition API 风格下除了 setup()钩子外,其余钩子函数都需要从 vue 包中导入。Vue 声明周期大体可以分为挂载(包含 beforeCreate、created、beforeMount、mounted)、更新(包括 beforeUpdate、updated)、销毁(包括 beforeDestroy、destroyed)三个阶段。</p><h3 id="_2-1-vue2-生命周期" tabindex="-1">2.1 Vue2 生命周期 <a class="header-anchor" href="#_2-1-vue2-生命周期" aria-label="Permalink to &quot;2.1 Vue2 生命周期&quot;">​</a></h3><ul><li>beforeCreate():在实例创建完成之前,此阶段实例的 data 和 methods 读取不到。</li><li>created():在实例创建之后,此阶段已完成数据的观测、属性和方法的运算、watch/event 事件回调,mount 挂载阶段还未开始,$el 属性目前不可见,数据并未在 Dom 元素中渲染,created 钩子函数完成后,开始进行模板(template)编译,将模板编译成渲染函数,有了 render 函数后才会执行 beforeMount()钩子函数。</li><li>beforeMount():在挂载到实例之前被调用,相关的 render()函数首次执行。</li><li>mounted():挂载到实例之后调用,el 选项的 Dom 节点被新创建的 vm.$el 替换,并挂载到实例之后被调用,此时数据开始在 Dom 节点上渲染,注意:后续的钩子函数都是需要外部的触发才能执行。</li><li>beforeUpdate():实例数据发生变化之前调用。</li><li>updated():实例数据发生变化后调用。</li><li>beforeDestroy():实例销毁之前被调用。</li><li>destroyed():实例销毁之后被调用。</li></ul><p>创建组件时父子组件钩子执行顺序:</p><ul><li>父 beforeCreate。</li><li>父 created。</li><li>父 beforeMount。</li><li>子 beforeCreate。</li><li>子 created、</li><li>子 beforeMount。</li><li>子 Mounted、</li><li>父 Mounted。</li></ul><p>更新状态时父子组件钩子执行顺序:</p><ul><li>父 beforeUpdate。</li><li>子 beforeUpdate。</li><li>父 updated。</li><li>子 updated。</li></ul><p>销毁组件时父子组件钩子执行顺序:</p><ul><li>父 beforeDestroy。</li><li>子 beforeDestroy。</li><li>子 destroy。</li><li>父 destroy。</li></ul><h3 id="_2-2-vue3-生命周期" tabindex="-1">2.2 Vue3 生命周期 <a class="header-anchor" href="#_2-2-vue3-生命周期" aria-label="Permalink to &quot;2.2 Vue3 生命周期&quot;">​</a></h3><ul><li>setup():等同 Vue2 中 beforeCreate 和 created()钩子函数。setup 接收 props 和 context 作为参数,由于在执行 setup 时尚未创建组件实例,因此在 setup 选项中没有 this(或者说 setup 的 this 指向 undefined)。这意味着,除了 props 之外,无法在 setup 函数中访问组件中声明的任何属性——本地状态、计算属性或方法。</li><li>onBeforeMount():等同 Vue2 中 beforeMount()钩子函数。</li><li>onMounted:等同 Vue2 的 mounted 钩子函数。</li><li>onBeforeUpdate():等同 Vue2 中 beforeUpdate()钩子函数。</li><li>onUpdated():等同 Vue2 中 updated()钩子函数。</li><li>onBeforeUnmount():等同 Vue2 中 beforeDestroy()钩子函数。</li><li>onUnmounted():等同 Vue 中 destroyed()钩子函数。</li><li>onRenderTracked():该钩子函数用于追踪状态,它会追踪页面上所有响应式变量和方法的状态,当有变量更新时,它就会进行跟踪,然后生成一个 event 事件,以供开发者调试。</li><li>onRenderTriggered():该钩子函数状态触发,它不会跟踪每一个值,而是给你变化值的信息,并且新值和旧值都会明确的展示出来。onRenderTriggered 只精确跟踪发生变化的值,进行针对性调试。</li></ul><h2 id="_3-vue-组件通讯方式有哪些" tabindex="-1">3.Vue 组件通讯方式有哪些? <a class="header-anchor" href="#_3-vue-组件通讯方式有哪些" aria-label="Permalink to &quot;3.Vue 组件通讯方式有哪些?&quot;">​</a></h2><h3 id="_3-1-vue2-组件通讯方式" tabindex="-1">3.1 Vue2 组件通讯方式 <a class="header-anchor" href="#_3-1-vue2-组件通讯方式" aria-label="Permalink to &quot;3.1 Vue2 组件通讯方式&quot;">​</a></h3><ul><li>父传子通过 props。</li><li>子传父通过$emit。通过$emit、sync 修饰符可实现数据双向流。</li><li>父传子通过$refs。$refs 用于获取使用 ref 属性注册过的所有 DOM 元素和组件实例。</li><li>父传子通过$children(可以获取子组件实例)。</li><li>子传父通过$parent(可以获取父组件实例)。</li><li>通过$root获取组件根实例通信,$root 包含了所有应用过的 vue 组件实例集合。</li><li>通过$attrs获取父组件传递的属性且未在当前组件的props中定义的属性,可以使用v-bind=&quot;$attrs&quot;向更深层级的组件传递(简称属性透传)。</li><li>通过$listeners获取父组件传递的v-on事件监听器,可以使用v-on=&quot;$listeners&quot; 向更深层级的组件传递(简称事件透传)。</li><li>通过 provide 在祖父组件定义属性,在子孙组件使用 inject 注入所需的属性。</li><li>EventBus 实现跨组件层级通讯。</li><li>第三方状态管理库。例如 Vuex。</li><li>浏览器存储机制实现跨组件层级通讯。例如 Cookie、LocalStorage、SessionStroage、IndexDB。</li></ul><h3 id="_3-2-vue3-组件通讯方式" tabindex="-1">3.2 Vue3 组件通讯方式 <a class="header-anchor" href="#_3-2-vue3-组件通讯方式" aria-label="Permalink to &quot;3.2 Vue3 组件通讯方式&quot;">​</a></h3><ul><li>父传子通过 props。</li><li>子传父通过 emit()。在 emits 选项上定义需要触发的事件,通过 setup 中 context 的 emit()函数触发事件。</li><li>父组件通过 ref 获取子组件实例,父组件获取子组件通过 defineExpose()暴露的方法和属性。</li><li>通过 attrs 父传子。attrs 包含父作用域里除 class 和 style 除外的非 props 属性集合, attrs 可以通过 useAttrs()和 setup context.attr 获取。</li><li>v-model。v-model 可以支持多个数据双向绑定。</li><li>provide/inject 实现跨组件层级通讯。provide 用于提供向后代组件使用的数据,后代组件通过 inject 注入指定数据即可使用。</li><li>第三方 EventBus 实现跨组件层级通讯。在 Vue3 中移除了 Event Bus 特性,但可以使用 mitt.js 等第三方库实现组件通讯,其实现原理还是 EventBus(底层基于发布订阅模式)。</li><li>第三方状态管理库实现跨组件层级通讯。例如 Pinia、Vue4。</li><li>浏览器存储机制实现跨组件层级通讯。例如 Cookie、LocalStorage、SessionStroage、IndexDB。</li></ul><h2 id="_4-为什么-vue2-组件的-data-是一个函数" tabindex="-1">4.为什么 Vue2 组件的 data 是一个函数 <a class="header-anchor" href="#_4-为什么-vue2-组件的-data-是一个函数" aria-label="Permalink to &quot;4.为什么 Vue2 组件的 data 是一个函数&quot;">​</a></h2><p>组件作用是抽离公共逻辑单元,这意味着组件是可以公用的,如果 data 是一个对象的话,那么所有组件实例都能访问到 data 对象,因为对象是对内存地址的引用,这样会造成组件数据的相互影响。如果 data 是一个函数,每个组件实例可以维护一份被返回对象的独立的拷贝。</p><h2 id="_5-在-vue-中为什么-props-是单向流" tabindex="-1">5.在 Vue 中为什么 Props 是单向流? <a class="header-anchor" href="#_5-在-vue-中为什么-props-是单向流" aria-label="Permalink to &quot;5.在 Vue 中为什么 Props 是单向流?&quot;">​</a></h2><p>Vue 之所以将组件组件的 Props 设计为单向流,是因为可以防止子组件对父组件的 Props 修改而造成混乱,子组件修改 Props 就会导致父组件状态的修改无法被预测,父组件无法捕获到 Props 如何被修改。</p><p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定:父级 prop 的更新会向下流动到子组件中,但是反过来则不行。这样会防止从子组件意外变更父级组件的状态,从而导致应用的数据流向难以理解。但可以通过<code>$emit()</code>和<code>.sync</code> 修饰符进行双向数据流通讯。</p><details class="details custom-block"><summary>示例</summary><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:visible.sync</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;visible&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      visible: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;changeVisible&quot;</span><span style="color:#E1E4E8;">&gt;change visible&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    visible: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: Boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">      default: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">changeVisible</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 通过触发 &quot;update:visible&quot; 事件修改父组件的visible为true</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;update:visible&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#B31D28;font-style:italic;">Child</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:visible.sync</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;visible&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      visible: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;changeVisible&quot;</span><span style="color:#24292E;">&gt;change visible&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  props: {</span></span>
<span class="line"><span style="color:#24292E;">    visible: {</span></span>
<span class="line"><span style="color:#24292E;">      type: Boolean,</span></span>
<span class="line"><span style="color:#24292E;">      default: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  methods: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">changeVisible</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 通过触发 &quot;update:visible&quot; 事件修改父组件的visible为true</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;update:visible&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></details><h2 id="_6-为什么在组件的-created-钩子函数进行数据请求" tabindex="-1">6.为什么在组件的 created 钩子函数进行数据请求? <a class="header-anchor" href="#_6-为什么在组件的-created-钩子函数进行数据请求" aria-label="Permalink to &quot;6.为什么在组件的 created 钩子函数进行数据请求?&quot;">​</a></h2><ul><li>能更快获取到服务端数据,减少页面 loading 时间。</li><li>ssr 不支持 beforeMount、mounted 钩子函数,所以放在 created 中有助于一致性。</li></ul><h2 id="_7-v-if-指令与-v-show-指令的区别" tabindex="-1">7.v-if 指令与 v-show 指令的区别? <a class="header-anchor" href="#_7-v-if-指令与-v-show-指令的区别" aria-label="Permalink to &quot;7.v-if 指令与 v-show 指令的区别?&quot;">​</a></h2><ul><li>v-show 本质就是通过设置 css 中的 display 设置为 none,控制元素隐藏,不管初始条件是什么元素总会渲染。v-if 是动态的向 DOM 树内添加或者删除 DOM 元素,当初识条件为 false 元素则不会被渲染。</li><li>v-if 切换时有一个局部编译和卸载的过程,切换过程中合适地销毁和重建内部的事件监听和子组件,所以 v-if 相比 v-show 具有更高的切换开销,而 v-show 有更高的初始渲染开销。</li><li>v-if 是惰性的。如果在初始渲染时条件为假,则什么也不做——直到条件第一次变为真时,才会开始渲染条件块。</li></ul><h2 id="_8-vue-中使用-v-for-指令为什么还要绑定-key" tabindex="-1">8.Vue 中使用 v-for 指令为什么还要绑定 key? <a class="header-anchor" href="#_8-vue-中使用-v-for-指令为什么还要绑定-key" aria-label="Permalink to &quot;8.Vue 中使用 v-for 指令为什么还要绑定 key?&quot;">​</a></h2><p>如果不使用 key,Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。key 是为 Vue 中 vnode 的唯一标记,通过这个 key,diff 操作可以更准确、更快速。</p><p>-「更准确」:因为带 key 就不是就地复用了,在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。</p><p>-「更快速」:利用 key 的唯一性生成 map 对象来获取对应节点,比遍历方式更快。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 判断两个vnode的标签和key是否相同 如果相同 就可以认为是同一节点就地复用</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isSameVnode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">oldVnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newVnode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> oldVnode.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> newVnode.tag </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> oldVnode.key </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> newVnode.key;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 根据key来创建老的儿子的index映射表  类似 {&#39;a&#39;:0,&#39;b&#39;:1} 代表key为&#39;a&#39;的节点在第一个位置 key为&#39;b&#39;的节点在第二个位置</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeIndexByKey</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">children</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  children.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    map[item.key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> map;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 生成的映射表</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeIndexByKey</span><span style="color:#E1E4E8;">(oldCh);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 判断两个vnode的标签和key是否相同 如果相同 就可以认为是同一节点就地复用</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSameVnode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">oldVnode</span><span style="color:#24292E;">, </span><span style="color:#E36209;">newVnode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldVnode.tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> newVnode.tag </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> oldVnode.key </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> newVnode.key;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 根据key来创建老的儿子的index映射表  类似 {&#39;a&#39;:0,&#39;b&#39;:1} 代表key为&#39;a&#39;的节点在第一个位置 key为&#39;b&#39;的节点在第二个位置</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeIndexByKey</span><span style="color:#24292E;">(</span><span style="color:#E36209;">children</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  children.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    map[item.key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> map;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 生成的映射表</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeIndexByKey</span><span style="color:#24292E;">(oldCh);</span></span></code></pre></div><h2 id="_9-v-for-和-v-if-优先级" tabindex="-1">9. v-for 和 v-if 优先级? <a class="header-anchor" href="#_9-v-for-和-v-if-优先级" aria-label="Permalink to &quot;9. v-for 和 v-if 优先级?&quot;">​</a></h2><p>在 Vue2.x 中同一节点使用 v-for 和 v-if,v-for 指令的优先级高于 v-if 指令。官方并不推荐 v-for 与 v-if 同时使用。如果 v-for 和 v-if 指令同时出现时,每次渲染都会先去循环再去判断,造成了额外的性能开销。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vue-template-compiler是一个可以将Vue模板编译为渲染函数的工具库</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;vue-template-compiler&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`&lt;div v-if=&quot;false&quot; v-for=&quot;n in 3&quot;&gt;&lt;/div&gt;\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * compile用于编译模板字符串并返回已编译的 JavaScript 代码,返回对象格式如下:</span></span>
<span class="line"><span style="color:#6A737D;"> * {</span></span>
<span class="line"><span style="color:#6A737D;">     ast:？ASTElement,  // 将模板元素解析为 AST,一个树形结构用于描述模板信息</span></span>
<span class="line"><span style="color:#6A737D;">     render:string,  // 主渲染函数代码,返回的函数代码使用with包裹,</span></span>
<span class="line"><span style="color:#6A737D;">     因此不能在严格模式代码中使用(违反CSP,即Content Security Policy,中文译为内容安全策略)</span></span>
<span class="line"><span style="color:#6A737D;">     staticRenderFns:Array&lt;string&gt;, // 为静态子树渲染代码，如果有</span></span>
<span class="line"><span style="color:#6A737D;">     errors:Array&lt;string&gt;  // 模板语法错误，如果任何</span></span>
<span class="line"><span style="color:#6A737D;">   } </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compiler.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(template);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ast.render);</span></span>
<span class="line"><span style="color:#6A737D;">// 结果:with(this){return _l((3),function(n){return (false)?_c(&#39;div&#39;):_e()})}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * vnode的相关方法:</span></span>
<span class="line"><span style="color:#6A737D;"> * _o()是markOnce()的简写,标记v-once。</span></span>
<span class="line"><span style="color:#6A737D;"> * _c()是createElement()的简写,用于创建Vnode节点。</span></span>
<span class="line"><span style="color:#6A737D;"> * _n()是toNumber()的简写,转换成Number类型。</span></span>
<span class="line"><span style="color:#6A737D;"> * _s()是toString()的简写,转换成String类型。</span></span>
<span class="line"><span style="color:#6A737D;"> * _l()是renderList()的简写,用于渲染v-for。</span></span>
<span class="line"><span style="color:#6A737D;"> * _t()是renderSlot()的简写,用于渲染普通插槽和作用域插槽。</span></span>
<span class="line"><span style="color:#6A737D;"> * _q()是looseEqual()的简写,用于两个对象之间宽松的比较。</span></span>
<span class="line"><span style="color:#6A737D;"> * _i()是looseIndexOf()的简写,宽松indexof。</span></span>
<span class="line"><span style="color:#6A737D;"> * _m()是renderStatic()的简写,通过staticRenderFns渲染静态节点。</span></span>
<span class="line"><span style="color:#6A737D;"> * _f()是resolveFilter()的简写,用于获取过滤器。</span></span>
<span class="line"><span style="color:#6A737D;"> * _k()是checkKeyCodes()的简写,检查键盘事件keycode。</span></span>
<span class="line"><span style="color:#6A737D;"> * _b()是bindObjectProps()的简写,用于处理v-bind=&#39;{}&#39;到vnodedata上</span></span>
<span class="line"><span style="color:#6A737D;"> * _v()是createTextVNode()的简写,用于创建文本vnode节点。</span></span>
<span class="line"><span style="color:#6A737D;"> * _e()是createEmptyVNode()的简写,用于创建一个空的vnode节点。</span></span>
<span class="line"><span style="color:#6A737D;"> * _u()是resolveScopedSlots()的简写,用于获取作用域插槽。</span></span>
<span class="line"><span style="color:#6A737D;"> * _g()是bindObjectListeners()的简写,处理v-on=&#39;{}&#39;到vnodedata上。</span></span>
<span class="line"><span style="color:#6A737D;"> * _d()是bindDynamicKeys()的简写,用于处理动态属性名。</span></span>
<span class="line"><span style="color:#6A737D;"> * _p()是prependModifier()的简写,处理修饰符。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * l()用于渲染列表,第一个参数表示渲染的次数,第二个参数是每次渲染执行的函数,</span></span>
<span class="line"><span style="color:#6A737D;"> * 当v-for与v-if同时使用时,首先会执行v-for进行循环,如果v-if表达式为true时</span></span>
<span class="line"><span style="color:#6A737D;"> * 就通过_c()创建对应节点,否则通过_e()创建一个空的vnode节点,</span></span>
<span class="line"><span style="color:#6A737D;"> * v-for与v-if同时使用会在每次循环都进行判断,造成了额外的性能开销。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vue-template-compiler是一个可以将Vue模板编译为渲染函数的工具库</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compiler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;vue-template-compiler&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">template</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`&lt;div v-if=&quot;false&quot; v-for=&quot;n in 3&quot;&gt;&lt;/div&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * compile用于编译模板字符串并返回已编译的 JavaScript 代码,返回对象格式如下:</span></span>
<span class="line"><span style="color:#6A737D;"> * {</span></span>
<span class="line"><span style="color:#6A737D;">     ast:？ASTElement,  // 将模板元素解析为 AST,一个树形结构用于描述模板信息</span></span>
<span class="line"><span style="color:#6A737D;">     render:string,  // 主渲染函数代码,返回的函数代码使用with包裹,</span></span>
<span class="line"><span style="color:#6A737D;">     因此不能在严格模式代码中使用(违反CSP,即Content Security Policy,中文译为内容安全策略)</span></span>
<span class="line"><span style="color:#6A737D;">     staticRenderFns:Array&lt;string&gt;, // 为静态子树渲染代码，如果有</span></span>
<span class="line"><span style="color:#6A737D;">     errors:Array&lt;string&gt;  // 模板语法错误，如果任何</span></span>
<span class="line"><span style="color:#6A737D;">   } </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compiler.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(template);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ast.render);</span></span>
<span class="line"><span style="color:#6A737D;">// 结果:with(this){return _l((3),function(n){return (false)?_c(&#39;div&#39;):_e()})}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * vnode的相关方法:</span></span>
<span class="line"><span style="color:#6A737D;"> * _o()是markOnce()的简写,标记v-once。</span></span>
<span class="line"><span style="color:#6A737D;"> * _c()是createElement()的简写,用于创建Vnode节点。</span></span>
<span class="line"><span style="color:#6A737D;"> * _n()是toNumber()的简写,转换成Number类型。</span></span>
<span class="line"><span style="color:#6A737D;"> * _s()是toString()的简写,转换成String类型。</span></span>
<span class="line"><span style="color:#6A737D;"> * _l()是renderList()的简写,用于渲染v-for。</span></span>
<span class="line"><span style="color:#6A737D;"> * _t()是renderSlot()的简写,用于渲染普通插槽和作用域插槽。</span></span>
<span class="line"><span style="color:#6A737D;"> * _q()是looseEqual()的简写,用于两个对象之间宽松的比较。</span></span>
<span class="line"><span style="color:#6A737D;"> * _i()是looseIndexOf()的简写,宽松indexof。</span></span>
<span class="line"><span style="color:#6A737D;"> * _m()是renderStatic()的简写,通过staticRenderFns渲染静态节点。</span></span>
<span class="line"><span style="color:#6A737D;"> * _f()是resolveFilter()的简写,用于获取过滤器。</span></span>
<span class="line"><span style="color:#6A737D;"> * _k()是checkKeyCodes()的简写,检查键盘事件keycode。</span></span>
<span class="line"><span style="color:#6A737D;"> * _b()是bindObjectProps()的简写,用于处理v-bind=&#39;{}&#39;到vnodedata上</span></span>
<span class="line"><span style="color:#6A737D;"> * _v()是createTextVNode()的简写,用于创建文本vnode节点。</span></span>
<span class="line"><span style="color:#6A737D;"> * _e()是createEmptyVNode()的简写,用于创建一个空的vnode节点。</span></span>
<span class="line"><span style="color:#6A737D;"> * _u()是resolveScopedSlots()的简写,用于获取作用域插槽。</span></span>
<span class="line"><span style="color:#6A737D;"> * _g()是bindObjectListeners()的简写,处理v-on=&#39;{}&#39;到vnodedata上。</span></span>
<span class="line"><span style="color:#6A737D;"> * _d()是bindDynamicKeys()的简写,用于处理动态属性名。</span></span>
<span class="line"><span style="color:#6A737D;"> * _p()是prependModifier()的简写,处理修饰符。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * l()用于渲染列表,第一个参数表示渲染的次数,第二个参数是每次渲染执行的函数,</span></span>
<span class="line"><span style="color:#6A737D;"> * 当v-for与v-if同时使用时,首先会执行v-for进行循环,如果v-if表达式为true时</span></span>
<span class="line"><span style="color:#6A737D;"> * 就通过_c()创建对应节点,否则通过_e()创建一个空的vnode节点,</span></span>
<span class="line"><span style="color:#6A737D;"> * v-for与v-if同时使用会在每次循环都进行判断,造成了额外的性能开销。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre></div><p>在 Vue3.x 中同一节点使用 v-for 和 v-if 指令,v-if 的优先级高于 v-for。借助 Vue SFC Playground 可以查看 SFC 文件编译结果,其底层也是通过<code>@vue/compiler-sfc</code>将 SFC 编译为渲染函数。</p><details class="details custom-block"><summary>v-if 条件为 true</summary><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;n in 3&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 编译结果如下:</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__sfc__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 渲染列表函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderList </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _renderList,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一个Fragment(碎片)元素,Vue 3提供的特性,Fragment用于支持多根节点的组件</span></span>
<span class="line"><span style="color:#E1E4E8;">  Fragment </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _Fragment,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 打开一个块元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  openBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _openBlock,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用于创建一个块元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  createElementBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createElementBlock,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用于创建一个元素虚拟节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  createElementVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createElementVNode,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用于创建一个注释虚拟节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  createCommentVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createCommentVNode,</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">_ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_cache</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">_openBlock</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">_createElementBlock</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        _Fragment,</span></span>
<span class="line"><span style="color:#E1E4E8;">        { key: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">_renderList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_createElementVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* STABLE_FRAGMENT */</span></span>
<span class="line"><span style="color:#E1E4E8;">      ))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_createCommentVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;v-if&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">__sfc__.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> render;</span></span>
<span class="line"><span style="color:#E1E4E8;">__sfc__.__file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;App.vue&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> __sfc__;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;n in 3&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 编译结果如下:</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__sfc__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 渲染列表函数</span></span>
<span class="line"><span style="color:#24292E;">  renderList </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _renderList,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一个Fragment(碎片)元素,Vue 3提供的特性,Fragment用于支持多根节点的组件</span></span>
<span class="line"><span style="color:#24292E;">  Fragment </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _Fragment,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 打开一个块元素</span></span>
<span class="line"><span style="color:#24292E;">  openBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _openBlock,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用于创建一个块元素</span></span>
<span class="line"><span style="color:#24292E;">  createElementBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createElementBlock,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用于创建一个元素虚拟节点</span></span>
<span class="line"><span style="color:#24292E;">  createElementVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createElementVNode,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用于创建一个注释虚拟节点</span></span>
<span class="line"><span style="color:#24292E;">  createCommentVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createCommentVNode,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">_cache</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">_openBlock</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">_createElementBlock</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        _Fragment,</span></span>
<span class="line"><span style="color:#24292E;">        { key: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">_renderList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">n</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_createElementVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">64</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* STABLE_FRAGMENT */</span></span>
<span class="line"><span style="color:#24292E;">      ))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_createCommentVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;v-if&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">__sfc__.render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> render;</span></span>
<span class="line"><span style="color:#24292E;">__sfc__.__file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;App.vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> __sfc__;</span></span></code></pre></div></details><details class="details custom-block"><summary>v-if 条件为 false</summary><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;n in 3&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 编译结果如下:</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__sfc__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 渲染列表函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderList </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _renderList,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一个Fragment(碎片)元素,Vue 3提供的特性,Fragment用于支持多根节点的组件</span></span>
<span class="line"><span style="color:#E1E4E8;">  Fragment </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _Fragment,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 打开一个块元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  openBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _openBlock,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用于创建一个块元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  createElementBlock </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createElementBlock,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用于创建一个元素虚拟节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  createElementVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createElementVNode,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用于创建一个注释虚拟节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  createCommentVNode </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> _createCommentVNode,</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">_ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_cache</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">_openBlock</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">_createElementBlock</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        _Fragment,</span></span>
<span class="line"><span style="color:#E1E4E8;">        { key: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">_renderList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_createElementVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* STABLE_FRAGMENT */</span></span>
<span class="line"><span style="color:#E1E4E8;">      ))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_createCommentVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;v-if&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">__sfc__.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> render;</span></span>
<span class="line"><span style="color:#E1E4E8;">__sfc__.__file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;App.vue&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> __sfc__;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;n in 3&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 编译结果如下:</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__sfc__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 渲染列表函数</span></span>
<span class="line"><span style="color:#24292E;">  renderList </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _renderList,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一个Fragment(碎片)元素,Vue 3提供的特性,Fragment用于支持多根节点的组件</span></span>
<span class="line"><span style="color:#24292E;">  Fragment </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _Fragment,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 打开一个块元素</span></span>
<span class="line"><span style="color:#24292E;">  openBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _openBlock,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用于创建一个块元素</span></span>
<span class="line"><span style="color:#24292E;">  createElementBlock </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createElementBlock,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用于创建一个元素虚拟节点</span></span>
<span class="line"><span style="color:#24292E;">  createElementVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createElementVNode,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用于创建一个注释虚拟节点</span></span>
<span class="line"><span style="color:#24292E;">  createCommentVNode </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _createCommentVNode,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">_cache</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">_openBlock</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">_createElementBlock</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        _Fragment,</span></span>
<span class="line"><span style="color:#24292E;">        { key: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">_renderList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">n</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_createElementVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">64</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* STABLE_FRAGMENT */</span></span>
<span class="line"><span style="color:#24292E;">      ))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_createCommentVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;v-if&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">__sfc__.render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> render;</span></span>
<span class="line"><span style="color:#24292E;">__sfc__.__file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;App.vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> __sfc__;</span></span></code></pre></div></details><p>从上述编译结果来看,首先会判断 v-if 值的结果是否为 true,为 true 则通过<code>createElementBlock</code>创建一个块元素,该块元素通过<code>renderList</code>循环创建元素,每次循环都会使用<code>createElementVNode</code>创建一个 div 元素;当 v-if 的值的结果为 false,则会创建一个 v-if 的注释节点。</p><h2 id="_10-计算属性和-watch-的区别" tabindex="-1">10.计算属性和 watch 的区别? <a class="header-anchor" href="#_10-计算属性和-watch-的区别" aria-label="Permalink to &quot;10.计算属性和 watch 的区别?&quot;">​</a></h2><p>computed:</p><ul><li>有缓存机制。当计算属性的依赖项未发生变化时,计算属性不会被重新执行。</li><li>不能接受参数。</li><li>可以组合组件其他的 computed 和 data 属性使用。</li><li>不能与 data 中的属性重复。</li><li>使用场景:当有一些数据需要随着另外一些数据发生改变时,建议使用 computed。</li></ul><p>watch:</p><ul><li>可以接受两个参数(deep 和 immeditate),deep 表示是否深度监听,watch 默认无法监听深层对象的变化;immeditate 表示是否立即执行 watch。</li><li>监听时可触发一个回调函数。</li><li>监听的属性必须是存在的。</li><li>允许异步操作。</li><li>使用场景:当响应式数据发生变化需要执行一些业务逻辑或异步操作时,建议使用 watch。</li></ul><h2 id="_11-vue-中-data-的属性可以和-methods-中的方法名相同吗" tabindex="-1">11.Vue 中 data 的属性可以和 methods 中的方法名相同吗? <a class="header-anchor" href="#_11-vue-中-data-的属性可以和-methods-中的方法名相同吗" aria-label="Permalink to &quot;11.Vue 中 data 的属性可以和 methods 中的方法名相同吗?&quot;">​</a></h2><p>Vue 中 data 属性可以与 methods 中的方法名可以相同,但是并不推荐这么做,这是因为在 Vue 实例中,data 中的属性和 methods 中的方法都会被代理到 Vue 实例中,如果名字相同,可能会导致命名冲突(访问时不知道访问的是 data 属性还是 methods)。另外,Vue 在实例化过程中会检查 methods 中的方法名是否和 Vue 内置的方法重名,如果重名会产生一个警告,因此尽量不要和 Vue 内置的方法名相同。</p><h2 id="_12-vue-指令的生命周期" tabindex="-1">12.Vue 指令的生命周期? <a class="header-anchor" href="#_12-vue-指令的生命周期" aria-label="Permalink to &quot;12.Vue 指令的生命周期?&quot;">​</a></h2><p>Vue 除了提供了 v-if、v-show 等内置指令外,还支持通过 Vue.directive()允许自定义指令,自定义指令生命周期如下:</p><ul><li>created:在绑定元素的 attribute 前或事件监听器应用前调用。</li><li>beforeMount:被插入到 DOM 之前调用。</li><li>mounted:在绑定元素的父组件,及它自己的所有子节点都挂载完成后调用。</li><li>beforeUpdate:绑定元素的父组件更新前调用。</li><li>updated:在绑定元素的父组件,及它自己的所有子节点都更新完成后调用。</li><li>beforeUnmount(el, binding, vnode, prevVnode):绑定元素的父组件卸载前调用。</li><li>unmounted(el, binding, vnode, prevVnode):绑定元素的父组件卸载后调用。</li></ul><h2 id="_13-在-vue-中定义定时器如何清理" tabindex="-1">13.在 Vue 中定义定时器如何清理? <a class="header-anchor" href="#_13-在-vue-中定义定时器如何清理" aria-label="Permalink to &quot;13.在 Vue 中定义定时器如何清理?&quot;">​</a></h2><ul><li>在 beforeDestroy 生命周期函数清除。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      timer: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.timer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;clear...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">beforeDestroy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">clearInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.timer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      timer: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;clear...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">beforeDestroy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">clearInterval</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.timer);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>这种做法需要在 vue 实例上定义一个变量接收定时器函数,而且定时器定义的代码跟清除代码独立分离</p><ul><li>通过$once 侦听器清除定时器(推荐)。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">timer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;clear&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$once</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hook:beforeDestroy&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">clearInterval</span><span style="color:#E1E4E8;">(timer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">timer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;clear&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$once</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hook:beforeDestroy&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">clearInterval</span><span style="color:#24292E;">(timer);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="_14-vue-如何强制刷新组件" tabindex="-1">14.Vue 如何强制刷新组件? <a class="header-anchor" href="#_14-vue-如何强制刷新组件" aria-label="Permalink to &quot;14.Vue 如何强制刷新组件?&quot;">​</a></h2><ul><li>通过 v-if 指令。在需要控制的组件跟标签使用 v-if 指令,v-if 指令对应的是一个布尔值,如果条件为 false 就表明这个元素不会被渲染。</li><li>通过 this.$forceUpdate()。this.$forceUpdate() 作用是强制 Vue 实例重新渲染,注意:它仅针对当前实例本身和它插槽内的子组件,并不包含所有组件。</li></ul><h2 id="_15-nexttick-的作用和实现原理" tabindex="-1">15.$nextTick()的作用和实现原理? <a class="header-anchor" href="#_15-nexttick-的作用和实现原理" aria-label="Permalink to &quot;15.$nextTick()的作用和实现原理?&quot;">​</a></h2><p>Vue.js 中的 $nextTick() 方法用于在 DOM 更新之后执行一个回调函数。在 Vue 中,当数据发生变化时,Vue 会异步执行 DOM 更新。这意味着,如果想要在数据更新后操作 DOM 元素,需要等到 Vue 完成更新后才能进行操作,$nextTick() 方法可以在下次 DOM 更新循环结束后执行回调函数,确保操作的正确性。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  el: </span><span style="color:#9ECBFF;">&quot;#app&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: { message: </span><span style="color:#9ECBFF;">&quot;Hello Vue.js!&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">updateMessage</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello World!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在下次 DOM 更新循环结束后执行</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$refs.message.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Updated!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  el: </span><span style="color:#032F62;">&quot;#app&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  data: { message: </span><span style="color:#032F62;">&quot;Hello Vue.js!&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  methods: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">updateMessage</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$nextTick</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在下次 DOM 更新循环结束后执行</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$refs.message.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Updated!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>在上面的例子中,当 updateMessage() 方法被调用时,它会先更新数据,然后在 $nextTick() 方法中执行回调函数，以确保 DOM 元素已经被更新。</p><p>在 Vue.js 2 (以 2.7 为例)中,$nextTick() 方法的源码实现在 <code>src/core/util/next-tick.ts</code> 文件中。具体来说,$nextTick() 方法是通过 Vue 的 util 模块中的 nextTick() 函数来实现的。在 next-tick.ts 文件中,首先会根据浏览器环境来选择使用哪种异步任务处理方式(比如 Promise、MutationObserver 或者 setImmediate、setTimeout),然后将传入的回调函数加入到异步任务队列中。$nextTick() 的源码如下:</p><details class="details custom-block"><summary>$nextTick()源码</summary><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { noop } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;shared/util&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { handleError } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./error&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { isIE, isIOS, isNative } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./env&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 是否使用微任务</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> isUsingMicroTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 任务队列,用于存放$nextTick()回调函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">callbacks</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#6A737D;">// 执行状态,true表示执行中</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 刷新任务队列,执行该函数后,首先会将执行状态设置为false,然后对任务队列进行了一份浅拷贝,</span></span>
<span class="line"><span style="color:#6A737D;"> * 并重置了任务队列,最后遍历浅拷贝的任务队列执行每一个$nextTick()回调函数。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flushCallbacks</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置执行状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对任务队列进行浅拷贝</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">copies</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callbacks.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 重置任务队列</span></span>
<span class="line"><span style="color:#E1E4E8;">  callbacks.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 遍历浅拷贝的任务队列执行每一个$nextTick()回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> copies.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    copies[i]();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> timerFunc;</span></span>
<span class="line"><span style="color:#6A737D;">// 如果当前环境支持Promise,则使用Promise.then()执行刷新任务队列</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNative</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">timerFunc</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    p.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 在有问题的UIWebViews中,Promise.then并没有完全崩溃,但它可能会陷入一种奇怪的状态,</span></span>
<span class="line"><span style="color:#6A737D;">     * 回调被推入微任务队列,但队列不会被刷新,直到浏览器需要做一些其他工作,例如处理计时器。</span></span>
<span class="line"><span style="color:#6A737D;">     * 因此,我们可以通过添加一个空计时器来“强制”刷新微任务队列。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isIOS) </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(noop);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  isUsingMicroTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 如果当前环境支持MutationObserver,则使用MutationObserver()执行刷新任务队列</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isIE </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> MutationObserver </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#B392F0;">isNative</span><span style="color:#E1E4E8;">(MutationObserver) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PhantomJS and iOS 7.x</span></span>
<span class="line"><span style="color:#E1E4E8;">    MutationObserver.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[object MutationObserverConstructor]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">observer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MutationObserver</span><span style="color:#E1E4E8;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">textNode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createTextNode</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(counter));</span></span>
<span class="line"><span style="color:#E1E4E8;">  observer.</span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(textNode, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    characterData: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">timerFunc</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (counter </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    textNode.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(counter);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  isUsingMicroTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 如果当前环境支持setImmediate,则使用setImmediate()执行刷新任务队列</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> setImmediate </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNative</span><span style="color:#E1E4E8;">(setImmediate)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">timerFunc</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setImmediate</span><span style="color:#E1E4E8;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 如果当前环境不支持Promise、MutationObserver、setImmediate,</span></span>
<span class="line"><span style="color:#6A737D;">   * 则使用setTimeout执行刷新任务队列函数。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">timerFunc</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(flushCallbacks, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">cb</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">ctx</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> _resolve;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 任务队列添加回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  callbacks.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cb) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cb.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">handleError</span><span style="color:#E1E4E8;">(e, ctx, </span><span style="color:#9ECBFF;">&quot;nextTick&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (_resolve) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">_resolve</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pending) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">timerFunc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cb </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      _resolve </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resolve;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { noop } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;shared/util&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { handleError } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./error&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { isIE, isIOS, isNative } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./env&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 是否使用微任务</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> isUsingMicroTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 任务队列,用于存放$nextTick()回调函数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">callbacks</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#6A737D;">// 执行状态,true表示执行中</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 刷新任务队列,执行该函数后,首先会将执行状态设置为false,然后对任务队列进行了一份浅拷贝,</span></span>
<span class="line"><span style="color:#6A737D;"> * 并重置了任务队列,最后遍历浅拷贝的任务队列执行每一个$nextTick()回调函数。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flushCallbacks</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置执行状态</span></span>
<span class="line"><span style="color:#24292E;">  pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对任务队列进行浅拷贝</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">copies</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callbacks.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 重置任务队列</span></span>
<span class="line"><span style="color:#24292E;">  callbacks.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 遍历浅拷贝的任务队列执行每一个$nextTick()回调函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> copies.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    copies[i]();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timerFunc;</span></span>
<span class="line"><span style="color:#6A737D;">// 如果当前环境支持Promise,则使用Promise.then()执行刷新任务队列</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNative</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">timerFunc</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    p.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 在有问题的UIWebViews中,Promise.then并没有完全崩溃,但它可能会陷入一种奇怪的状态,</span></span>
<span class="line"><span style="color:#6A737D;">     * 回调被推入微任务队列,但队列不会被刷新,直到浏览器需要做一些其他工作,例如处理计时器。</span></span>
<span class="line"><span style="color:#6A737D;">     * 因此,我们可以通过添加一个空计时器来“强制”刷新微任务队列。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isIOS) </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(noop);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  isUsingMicroTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 如果当前环境支持MutationObserver,则使用MutationObserver()执行刷新任务队列</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isIE </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> MutationObserver </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#6F42C1;">isNative</span><span style="color:#24292E;">(MutationObserver) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PhantomJS and iOS 7.x</span></span>
<span class="line"><span style="color:#24292E;">    MutationObserver.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[object MutationObserverConstructor]&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">observer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MutationObserver</span><span style="color:#24292E;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">textNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createTextNode</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(counter));</span></span>
<span class="line"><span style="color:#24292E;">  observer.</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(textNode, {</span></span>
<span class="line"><span style="color:#24292E;">    characterData: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">timerFunc</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (counter </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    textNode.data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(counter);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  isUsingMicroTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 如果当前环境支持setImmediate,则使用setImmediate()执行刷新任务队列</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> setImmediate </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNative</span><span style="color:#24292E;">(setImmediate)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">timerFunc</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setImmediate</span><span style="color:#24292E;">(flushCallbacks);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 如果当前环境不支持Promise、MutationObserver、setImmediate,</span></span>
<span class="line"><span style="color:#6A737D;">   * 则使用setTimeout执行刷新任务队列函数。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">timerFunc</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(flushCallbacks, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">cb</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">, </span><span style="color:#E36209;">ctx</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> _resolve;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 任务队列添加回调函数</span></span>
<span class="line"><span style="color:#24292E;">  callbacks.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cb) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        cb.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">handleError</span><span style="color:#24292E;">(e, ctx, </span><span style="color:#032F62;">&quot;nextTick&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (_resolve) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">_resolve</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pending) {</span></span>
<span class="line"><span style="color:#24292E;">    pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">timerFunc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cb </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;undefined&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      _resolve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resolve;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><p>在 nextTick.ts 源码中,callbacks 是一个数组,用来保存所有加入异步任务队列中的回调函数。当调用 $nextTick()方法时,会将传入的回调函数加入到 callbacks 数组中,然后通过浏览器提供的异步任务处理方式(macroTimerFunc() 或 microTimerFunc())来异步执行 callbacks 数组中的所有回调函数。</p><p>需要注意的是,Vue 在每次异步执行回调函数前会将 pending 标志设置为 true,以保证异步任务队列中的回调函数只会被执行一次。同时,如果当前浏览器环境支持 Promise,则 $nextTick() 方法也可以返回一个 Promise 对象,以便在异步任务执行完毕后进行相关操作。</p><p><strong>$nextTick() 的实现原理:将$nextTick()回调函数加入一个队列中,在下次 DOM 更新循环结束后依次执行队列中的所有回调函数。当数据变化时,Vue 会先将需要更新的 DOM 元素放到一个队列中,然后通过浏览器提供的 API 监听 DOM 的变化,当 DOM 变化结束时,触发 $nextTick() 方法中的回调函数</strong>。</p><h2 id="_16-keepalive-组件的实现原理" tabindex="-1">16.keepAlive 组件的实现原理 <a class="header-anchor" href="#_16-keepalive-组件的实现原理" aria-label="Permalink to &quot;16.keepAlive 组件的实现原理&quot;">​</a></h2><p>Keepalive 包裹组件时,会缓存不活动的组件实例。Keepalive 底层实现原理是通过缓存机制存储了 Keepalive 组件包裹的首个子组件实例,即使进行路由切换,由于有缓存机制所以并不会销毁子组件。Keepalive 组件源码大体逻辑如下:</p><ul><li>调用 getFirstComponentChild()根据 Keepalive 组件的 slot 获取 KeepAlive 组件包裹的第一个子组件(假设简称 vnode),由于 slot 是一个 VNode 数组,getFirstComponentChild()通过循环遍历 slot 并判断遍历项是否具有 componentOptions 属性,以此来判断 VNode 节点是否是一个组件,当遍历项是一个注释节点且是一个异步组件工厂函数时也会被是认为一个组件。</li><li>当通过 getFirstComponentChild()获取到 Keepalive 包裹的首个子组件后,Keepalive 会根据 include、exclude 引入或排除一些不符合条件的组件。</li><li>Keepalive 源码中维护了 cached、keys 两个重要的属性,cached 是一个对象用于缓存组件,keys 用于维护缓存 key。当 vnode 上如果有 key 属性则会被当做缓存 key,否则将会以组件 id+组件 tag 的形式作为缓存 key(简称 key)。由于组件初始化时未命中缓存,所以 cached 以 key 作为键,以 vnode 作为 value 将组件节点缓存起来,keys 也会 push 对应的 keys 以便清除缓存 key;当下次命中缓存时会从缓存中取出组件实例(componentInstance)赋值给 vnode 的组件实例(componentInstance),并清理相关缓存 key。</li></ul><h2 id="_17-vue-响应式数据实现原理" tabindex="-1">17.Vue 响应式数据实现原理? <a class="header-anchor" href="#_17-vue-响应式数据实现原理" aria-label="Permalink to &quot;17.Vue 响应式数据实现原理?&quot;">​</a></h2><h3 id="_17-1-vue2-响应式数据实现原理" tabindex="-1">17.1 Vue2 响应式数据实现原理? <a class="header-anchor" href="#_17-1-vue2-响应式数据实现原理" aria-label="Permalink to &quot;17.1 Vue2 响应式数据实现原理?&quot;">​</a></h3><p>Vue2 实现响应式数据分为两大块:普通对象类型的数据响应式和数组类型的数据响应式。</p><ul><li><p>普通对象类型的数据响应式:对于普通对象类型的数据响应式,Vue2 中通过 Object.definedProperty()拦截对象的 get 与 set 操作,当数据发生变化时就会触发 set 操作从而触发组件重新渲染。由于 Object.definedProperty 兼容性问题,所以 Vue2 不支持 IE8。</p></li><li><p>数组类型的数据响应式:由于 Object.definedProperty 无法拦截到数组数据的变化,所以在 Vue2 中对于数组数据响应式通过重写数组上的 7 个原型方法实现的,这 7 个数组分别为 push、pop、shift、unshift、splice、sort、reverse,当调用数组的这 7 个方法时,实际上调用的是重写后的方法,通过数据劫持的机制就能实现对数组类型的侦听。所以通过数组下标修改值此时是无法获得响应式,但 Vue 提供了 set、get Api 解决这一问题。</p></li></ul><p>简单来说在 Vue2 通过 Object.definedProperty()与重写原型方法的方式,会递归的把 data 对象中所有数据转化为 getter/setter,当数据发生变化时就会触发 setter,从而通知视图更新。</p><p>当执行 new Vue() 时,Vue 就进入了初始化阶段,一方面 Vue 会遍历 data 选项中的属性,并用 Object.defineProperty 将它们转为 getter/setter,实现数据变化监听功能;另一方面,Vue 的指令编译器 Compile 对元素节点的指令进行扫描和解析,初始化视图,并订阅 Watcher 来更新视图,此时 Wather 会将自己添加到消息订阅器中(Dep),初始化完毕。当数据发生变化时,Observer 中的 setter 方法被触发,setter 会立即调用 Dep.notify(),Dep 开始遍历所有的订阅者,并调用订阅者的 update() 方法,订阅者收到通知后对视图进行相应的更新。</p><h3 id="_17-2-vue3-响应式数据实现原理" tabindex="-1">17.2 Vue3 响应式数据实现原理? <a class="header-anchor" href="#_17-2-vue3-响应式数据实现原理" aria-label="Permalink to &quot;17.2 Vue3 响应式数据实现原理?&quot;">​</a></h3><p>在 Vue3 中使用 ES6 提供的 Proxy 实现了数据的侦听,对比 Object.definedProperty()具有以下优点:</p><ul><li>支持更多的拦截功能。Proxy 支持对象属性的读取、写入、删除、枚举等 13 种对象操作。实例化 Proxy 会返回一个新的代理对象,当对代理对象进行操作 Proxy 可以进行拦截,而 Object.definedProperty()是对原始对象的侦听,因此 Object.definedProperty()无法侦听对象新增和删除属性等操作,但是 Proxy 支持对象新增和删除属性。</li><li>深层嵌套的对象侦听:Vue2 提供了 observe()用于实现对象的侦听,如果对象是一个嵌套对象(对象属性值是引用类型,例如<code>const obj = {a:{b:{c:1}}}</code>)时,observe()首先会遍历该对象,并判断该对象对应的属性值是否是引用类型(对象或数组),如果是则递归调用 observe()实现数据深层次的侦听。Proxy 内置支持深层嵌套对象的侦听,无需递归式的深层次侦听,因此性能比 Object.definedProperty()更好。</li><li>支持数组监听。在 Vue2 中通过重写数组原型上的七个方法从而实现数组的侦听,Proxy 不仅支持对象的侦听,同时也支持数组。</li></ul><h2 id="_18-vuerouter-的实现原理" tabindex="-1">18.VueRouter 的实现原理? <a class="header-anchor" href="#_18-vuerouter-的实现原理" aria-label="Permalink to &quot;18.VueRouter 的实现原理?&quot;">​</a></h2><p>VueRouter 的实现原理是不刷新浏览器实现路由的切换。VueRouter 内部支持 abstract、history、hash 三种模式,在 Hash 模式下,路径会带有 # 号,路径改变不会导致页面刷新;而 History 模式下,路径不带 # 号,路径改变会导致页面刷新。VueRouter 的实现包括路由匹配和监听路由变化两部分组成:</p><ul><li>路由匹配:在 VueRouter 中,路由映射表用来将 path 映射为对应的组件。在创建 VueRouter 实例时,会传入一个 routes 配置项,其中定义了 path 和 component 的对应关系。VueRouter 会将这个路由映射表转换为一棵路由匹配树,并通过深度优先遍历的方式匹配 path,找到对应的 component。</li><li>监听路由变化:在 Hash 模式下,VueRouter 内部通过监听<code>hashchange</code>事件监听 URL 的 hash 值(＃符号后面的 URL 部分,包括＃符号)变化。在 History 模式下,VueRouter 内部通过 HTML5 的 History API 实现。当调用路由的 push() 或 replace() 方法时,实际上是调用的 history 对象的 pushState() 或 replaceState()函数;VueRouter 内部还监听了<code>popstate</code>事件,用于监听浏览器的前进后退。</li></ul><p>VueRouter 的实现原理主要包括两个方面:路由匹配和路由变化。通过路由匹配,将路由地址映射为对应的组件,通过监听路由变化,触发页面跳转,并更新对应的视图。</p><h2 id="_19-vuerouter-中-this-router与this-route-的区别" tabindex="-1">19.VueRouter 中 this.$router与this.$route 的区别? <a class="header-anchor" href="#_19-vuerouter-中-this-router与this-route-的区别" aria-label="Permalink to &quot;19.VueRouter 中 this.$router与this.$route 的区别?&quot;">​</a></h2><ul><li>this.$router 表示 VueRouter 的实例,它可以控制导航路由。</li><li>this.$route表示当前路由跳转对象,通过this.$route 可以获取 name、path、params、query、meta 等数据。</li></ul><h2 id="_20-history-和-hash-模式的区别" tabindex="-1">20.history 和 hash 模式的区别? <a class="header-anchor" href="#_20-history-和-hash-模式的区别" aria-label="Permalink to &quot;20.history 和 hash 模式的区别?&quot;">​</a></h2><p>VueRouter 目前提供了 abstract、history、hash 三种模式。history 模式与 hash 模式区别如下:</p><ul><li>在 hash 模式下,仅 hash 符号之前的内容会被包含在请求中,例如:<code>http://www.aaa.com</code> ,因此对于后端来说,即使没有做到对路由的全覆盖,也不会返回 404 的错误。</li><li>在 history 模式下,前端的 URL 必须和实际向后端发起请求的 URL 一致,例如<code>http://www.aaa/book/a</code> ,如果后端缺少对/book/a 的路由处理,将会返回 404 错误。</li></ul><h2 id="_21-vuerouter-切换和-location-href-切换有什么区别" tabindex="-1">21.VueRouter 切换和 location.href 切换有什么区别? <a class="header-anchor" href="#_21-vuerouter-切换和-location-href-切换有什么区别" aria-label="Permalink to &quot;21.VueRouter 切换和 location.href 切换有什么区别?&quot;">​</a></h2><ul><li>location.href 切换会刷新页面,而 VueRouter 并不会刷新页面。</li><li>VueRouter 提供了路由守卫,匹配路由时会执行对应的路由守卫,相比较 location.href 切换能提供更多控制,例如路由切换时做鉴权、参数验证等业务逻辑处理。</li></ul><h2 id="_22-vuerouter-导航守卫有哪些" tabindex="-1">22.VueRouter 导航守卫有哪些? <a class="header-anchor" href="#_22-vuerouter-导航守卫有哪些" aria-label="Permalink to &quot;22.VueRouter 导航守卫有哪些?&quot;">​</a></h2><p>根据作用范围导航钩子可分为全局导航守卫(作用于任意路由和组件)、路由独享守卫(仅作用于当前路由)、组件守卫(仅作用于当前组件)。</p><ul><li>全局导航守卫:根据执行顺序全局导航守卫分为全局前置守卫、全局解析守卫、全局后置守卫。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * to: Route: 即将要进入的目标路由对象。</span></span>
<span class="line"><span style="color:#6A737D;"> * from: Route: 当前导航正要离开的路由。</span></span>
<span class="line"><span style="color:#6A737D;"> * next: Function: 放行路由,一定要调用该方法来 resolve 这个钩子。next()的执行效果依赖于参数,例如:</span></span>
<span class="line"><span style="color:#6A737D;"> * - next(false): 中断当前的导航。如果浏览器的 URL改变了(可能是用户手动或者浏览器后退按钮),</span></span>
<span class="line"><span style="color:#6A737D;"> * 那么 URL 地址会重置到 from 路由对应的地址。</span></span>
<span class="line"><span style="color:#6A737D;"> * - next(&#39;/&#39;) 或者 next({ path: &#39;/&#39; }): 跳转到一个不同的地址。当前的导航被中断,然后进行一个新的导航。</span></span>
<span class="line"><span style="color:#6A737D;"> * 允许向 next 传递任意位置对象,且允许设置诸如 replace: true、name: &#39;home&#39; 之类的选项以及任何用在</span></span>
<span class="line"><span style="color:#6A737D;"> * router-link 的 to prop 或 router.push 中的选项。</span></span>
<span class="line"><span style="color:#6A737D;"> * - next(error):如果传入 next 的参数是一个 Error 实例,则导航会被终止且该错误会被传递给</span></span>
<span class="line"><span style="color:#6A737D;"> * router.onError() 注册过的回调。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">// 全局前置守卫,当一个导航触发时,全局前置守卫按照创建顺序调用</span></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">beforeEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 全局解析守卫,在导航被确认之前,同时在所有组件内守卫和异步路由组件被解析之后调用</span></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">beforeResolve</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 全局后置守卫,导航确认之后调用</span></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">afterEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * to: Route: 即将要进入的目标路由对象。</span></span>
<span class="line"><span style="color:#6A737D;"> * from: Route: 当前导航正要离开的路由。</span></span>
<span class="line"><span style="color:#6A737D;"> * next: Function: 放行路由,一定要调用该方法来 resolve 这个钩子。next()的执行效果依赖于参数,例如:</span></span>
<span class="line"><span style="color:#6A737D;"> * - next(false): 中断当前的导航。如果浏览器的 URL改变了(可能是用户手动或者浏览器后退按钮),</span></span>
<span class="line"><span style="color:#6A737D;"> * 那么 URL 地址会重置到 from 路由对应的地址。</span></span>
<span class="line"><span style="color:#6A737D;"> * - next(&#39;/&#39;) 或者 next({ path: &#39;/&#39; }): 跳转到一个不同的地址。当前的导航被中断,然后进行一个新的导航。</span></span>
<span class="line"><span style="color:#6A737D;"> * 允许向 next 传递任意位置对象,且允许设置诸如 replace: true、name: &#39;home&#39; 之类的选项以及任何用在</span></span>
<span class="line"><span style="color:#6A737D;"> * router-link 的 to prop 或 router.push 中的选项。</span></span>
<span class="line"><span style="color:#6A737D;"> * - next(error):如果传入 next 的参数是一个 Error 实例,则导航会被终止且该错误会被传递给</span></span>
<span class="line"><span style="color:#6A737D;"> * router.onError() 注册过的回调。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">// 全局前置守卫,当一个导航触发时,全局前置守卫按照创建顺序调用</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 全局解析守卫,在导航被确认之前,同时在所有组件内守卫和异步路由组件被解析之后调用</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeResolve</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 全局后置守卫,导航确认之后调用</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">afterEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span></code></pre></div><ul><li>路由独享守卫:在进入路由时调用 beforeEnter 守卫。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VueRouter</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      path: </span><span style="color:#9ECBFF;">&quot;/foo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      component: Foo,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">beforeEnter</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VueRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  routes: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      path: </span><span style="color:#032F62;">&quot;/foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      component: Foo,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">beforeEnter</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ul><li>组件守卫:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  template: </span><span style="color:#9ECBFF;">\`...\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 在渲染该组件的对应路由被 confirm 前调用,该守卫内无法访问this,</span></span>
<span class="line"><span style="color:#6A737D;">   * 因为当守卫执行前,组件实例还没被创建</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">beforeRouteEnter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 在当前路由改变,但是该组件被复用时调用。举例来说,对于一个带有动态参数的路径</span></span>
<span class="line"><span style="color:#6A737D;">   * /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候,由于会渲染同样的 Foo 组件,</span></span>
<span class="line"><span style="color:#6A737D;">   * 因此组件实例会被复用。而这个钩子就会在这个情况下被调用。可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">beforeRouteUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 导航离开该组件的对应路由时调用,可访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">beforeRouteLeave</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  template: </span><span style="color:#032F62;">\`...\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 在渲染该组件的对应路由被 confirm 前调用,该守卫内无法访问this,</span></span>
<span class="line"><span style="color:#6A737D;">   * 因为当守卫执行前,组件实例还没被创建</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">beforeRouteEnter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 在当前路由改变,但是该组件被复用时调用。举例来说,对于一个带有动态参数的路径</span></span>
<span class="line"><span style="color:#6A737D;">   * /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候,由于会渲染同样的 Foo 组件,</span></span>
<span class="line"><span style="color:#6A737D;">   * 因此组件实例会被复用。而这个钩子就会在这个情况下被调用。可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">beforeRouteUpdate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 导航离开该组件的对应路由时调用,可访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">beforeRouteLeave</span><span style="color:#24292E;">(</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="_23-vuerouter-路由传值方式有哪些" tabindex="-1">23.VueRouter 路由传值方式有哪些? <a class="header-anchor" href="#_23-vuerouter-路由传值方式有哪些" aria-label="Permalink to &quot;23.VueRouter 路由传值方式有哪些?&quot;">​</a></h2><ul><li>路径参数(即动态路由):在路由定义时使用<code>:变量名</code>来表示动态参数,例如在路由定义中设置 <code>path: &#39;/user/:userId&#39;</code>,在组件中可以通过 <code>$route.params.userId</code> 来获取参数。</li><li>查询参数:在路由跳转时可以使用 <code>router.push({path: &#39;/user&#39;, query: {userId: 123}})</code> 来传递参数,组件中可以通过 <code>$route.query.userId</code> 来获取参数。</li><li>状态参数(即路由元信息):可以在路由定义中设置 meta 属性,例如 <code>meta: {isLogin: true}</code>,在组件中可以通过 <code>$route.meta.isLogin</code> 来获取参数。</li><li>props 参数:可以在路由定义中通过设置 <code>props: true</code> 或者自定义函数来启用 props 参数,例如 props: true 表示将所有的路由参数通过 props 传递给组件，自定义函数可以通过 <code>$route.params</code> 或 <code>$route.query</code> 来获取参数,例如 <code>props: (route) =&gt; ({userId: route.params.userId})</code>。在组件中可以通过 props 属性来获取参数。</li></ul><h2 id="_24-vuerouter-中-params-和-query-传参的区别" tabindex="-1">24.VueRouter 中 params 和 query 传参的区别? <a class="header-anchor" href="#_24-vuerouter-中-params-和-query-传参的区别" aria-label="Permalink to &quot;24.VueRouter 中 params 和 query 传参的区别?&quot;">​</a></h2><ul><li>params 只能根据 name 来引入路由,query 既可以根据路由 name,又可以根据 path 引入路由。</li><li>params 类似于 post 请求,参数不会在地址栏显示,而 query 类似于 get 请求,参数会在地址栏显示。</li></ul><h2 id="_25-vue3-的新特性" tabindex="-1">25.Vue3 的新特性? <a class="header-anchor" href="#_25-vue3-的新特性" aria-label="Permalink to &quot;25.Vue3 的新特性?&quot;">​</a></h2><ul><li><strong>Composition API</strong>。这是 Vue3 中最重要的特性之一,它可以更好地组织组件代码,使其更易于维护和重用。</li><li><strong>setup 语法糖</strong>。</li></ul><h2 id="_26-vue3-对比-vue2-有哪些优化点" tabindex="-1">26.Vue3 对比 Vue2 有哪些优化点? <a class="header-anchor" href="#_26-vue3-对比-vue2-有哪些优化点" aria-label="Permalink to &quot;26.Vue3 对比 Vue2 有哪些优化点?&quot;">​</a></h2><ul><li><strong>响应式系统优化</strong>。Vue3 引入了 Proxy 对象作为响应式系统的实现方式,代替了 Vue2 中使用的 Object.defineProperty()。这种优化可以提高响应式系统的性能,减少了监听的数据量,并支持嵌套属性和动态添加属性,Proxy 相较于 Object.defineProperty()的监听数据优点如下: <ul><li><strong>更好的性能</strong>。Object.defineProperty() 监听对象属性时,只能遍历对象的属性,因此当对象的属性较多时,会导致性能问题。而 Proxy 可以监听整个对象,所以它的性能更好。</li><li><strong>支持数组变化检测</strong>。由于 Object.defineProperty()无法监听数组类型的数据,在 Vue2 中对数组原型上的 7 个方法进行了重写拦截,从而实现了数组的监听,而 Proxy 可以直接监听数组的变化。</li><li><strong>支持动态添加属性</strong>。使用 Object.defineProperty() 监听属性时,只能监听已存在的属性,无法监听动态添加的属性,在 Vue2 中为了监听动态添加的属性,提供了$set()和$delete()方法分别用于监听对象的设置属性和删除属性。相比较 Object.defineProperty() Proxy 可以监听动态添加的属性。</li><li><strong>支持嵌套属性监听</strong>。使用 Object.defineProperty() 监听属性时,无法监听嵌套属性(例如对象嵌套对象或对象嵌套数组等)的变化,需要通过递归监听。而 Proxy 可以监听嵌套属性的变化。</li><li><strong>更好的错误提示</strong>。使用 Proxy 监听属性时,如果出现错误会更容易发现和定位错误,而 Object.defineProperty() 的错误提示相对较弱。</li></ul></li><li><strong>编译器优化</strong>。Vue3 引入了静态模板缓存机制,可以减少渲染时的编译开销,提高了页面渲染性能。同时也支持了更好的 Tree Shaking,只编译使用到的模板和组件,减小了打包后的体积。</li><li><strong>更好的组件逻辑复用</strong>。Vue3 引入了 Composition API,这个新的 API 使组件的逻辑复用更加方便,能够更好地组织代码,提高了代码的可维护性和可读性。而且 Vue3 提供 Composition API 支持 Tree Shaking,未使用的 API 均不会被打包。</li><li><strong>更快的虚拟 DOM</strong>。Vue3 的虚拟 DOM 渲染性能得到了提升,主要是通过更好的 Diff 算法和事件的缓存处理,减少了虚拟 DOM 的更新次数,提高了页面的渲染效率。</li><li><strong>更好的 TypeScript 支持</strong>。Vue3 对 TypeScript 的支持更加友好,提供了更好的类型推断和类型检查,方便了开发者在项目中使用 TypeScript。</li></ul><h2 id="_27-vue3-的编译优化有哪些" tabindex="-1">27.Vue3 的编译优化有哪些? <a class="header-anchor" href="#_27-vue3-的编译优化有哪些" aria-label="Permalink to &quot;27.Vue3 的编译优化有哪些?&quot;">​</a></h2><ul><li><strong>Block 和 PatchFlags(补丁标志)优化</strong>。由于在运行时得不到足够的关键信息,无法区分动态内容和静态内容,因此传统 DIFF 算法无法避免新旧虚拟 DOM 树之间无用的比较操作。Vue3 为了避免新旧虚拟 DOM 之间无效比较操作,在虚拟节点新增了 dynamicChildren 属性来存储虚拟节点的动态信息(保存了动态节点信息),带有 dynamicChildren 属性的虚拟节点被称为 Block(块),并且使用 PatchFlags(补丁标志)来区分操作类型(PatchFlags 是一个数字,当虚拟节点存在 PatchFlags 时表示当前节点是一个动态节点)。渲染器在更新时以 Block 为维度,更新一个 Block 时,会忽略虚拟节点的 children 数组,而是直接找到该虚拟节点的 dynamicChildren 数组,并只更新该数组中的动态节点。这样可以在更新时跳过静态内容,仅更新动态内容,从而实现精确更新,提升 DIFF 更新效率。</li><li><strong>静态提升</strong>。静态提升即把纯静态的虚拟节点提升到渲染函数之外,从而减少更新时创建虚拟 DOM 带来的性能开销和内存占用。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//--- 静态提升前的例子</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">openBlock</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">createBlock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">       * 当前虚拟节点是静态节点,更新时创建虚拟DOM会带来性能开销和内存占用,</span></span>
<span class="line"><span style="color:#6A737D;">       * 因此可以将该节点静态提升到渲染函数外</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static text&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, ctx.title, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ])</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//--- 静态提升后的例子</span></span>
<span class="line"><span style="color:#6A737D;">// 将静态节点提升到渲染函数外,渲染函数重新执行时并不会重新创建静态虚拟节点,从而避免了额外开销</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hoist1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static text&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">openBlock</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">createBlock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 引用静态节点</span></span>
<span class="line"><span style="color:#E1E4E8;">      hoist1,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">createVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, ctx.title, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ])</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//--- 静态提升前的例子</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">openBlock</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">createBlock</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">       * 当前虚拟节点是静态节点,更新时创建虚拟DOM会带来性能开销和内存占用,</span></span>
<span class="line"><span style="color:#6A737D;">       * 因此可以将该节点静态提升到渲染函数外</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static text&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, ctx.title, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    ])</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//--- 静态提升后的例子</span></span>
<span class="line"><span style="color:#6A737D;">// 将静态节点提升到渲染函数外,渲染函数重新执行时并不会重新创建静态虚拟节点,从而避免了额外开销</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hoist1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static text&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">openBlock</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">createBlock</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 引用静态节点</span></span>
<span class="line"><span style="color:#24292E;">      hoist1,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">createVNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, ctx.title, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    ])</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>预字符串化</strong>。预字符串化是基于静态提升的一种优化策略,如果模板中包含了大量连续纯静态节点,通过预字符串化可以将这些连续的静态节点序列化为字符串,并生成一个 Static 类型的虚拟节点。预字符串化的优点如下: <ul><li>大块的静态内容可以通过 innerHTML 进行设置,性能上具有一定的优势。</li><li>减少创建虚拟节点产生的性能开销和内存占用。当存在大量连续纯静态节点,通过静态提升策略会创建大量静态节点,而预字符串化仅需创建少量静态节点。</li></ul></li><li><strong>缓存内联事件处理函数</strong>。组件每次重新渲染时,都会为组件创建一个全新的 props 对象,props 对象中的处理事件也会被重新创建,从而造成额外的性能开销(处理事件变化会导致组件重新渲染)。Vue3 为了避免组件重新渲染时重新创建处理事件,对内联事件处理函数进行了缓存,组件重新渲染时优先读取缓存中的事件处理函数,从而减少重新渲染组件时重新创建处理事件的开销,避免造成不必要的组件更新。</li><li><strong>v-once 指令优化</strong>。v-once 指令可以缓存全部或部门虚拟节点,能够避免组件更新时重新创建虚拟 DOM 带来的性能开销,也可以避免无用的 DIFF 操作。</li><li><strong>v-memo 指令优化</strong>。v-memo 接收一个依赖数组,当模板更新前与更新后依赖数组的每一项都相同时(也就是模板更新前与更新后依赖数组未发生变化),那么会跳过当前节点的更新,从而避免无用 DIFF 操作。v-memo 通常搭配 v-for 使用(v-memo 和 v-for 必须用在同一节点上才会生效),在 v-for 渲染列表时,使用 v-memo 可以避免创建大量虚拟节点。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 未使用v-memo时,selected状态发生变化时,会触发组件重新渲染导致创建大量vnode,</span></span>
<span class="line"><span style="color:#6A737D;">  而渲染列表中的节点大部分是无需变化的 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item in list&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item.id&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;ID: {{ item.id }} - selected: {{ item.id === selected }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;...more child nodes&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 使用v-memo时,selected状态发生变化时,由于使用了v-memo=&quot;[item.id === selected]&quot;</span></span>
<span class="line"><span style="color:#6A737D;">  表示只有列表项被选中状态改变时才需要更新,其他状态未变化的列表项可以重用之前的vnode </span></span>
<span class="line"><span style="color:#6A737D;">  并跳过差异比较 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item in list&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item.id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-memo</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;[item.id === selected]&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;ID: {{ item.id }} - selected: {{ item.id === selected }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;...more child nodes&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 未使用v-memo时,selected状态发生变化时,会触发组件重新渲染导致创建大量vnode,</span></span>
<span class="line"><span style="color:#6A737D;">  而渲染列表中的节点大部分是无需变化的 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item in list&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item.id&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;ID: {{ item.id }} - selected: {{ item.id === selected }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;...more child nodes&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 使用v-memo时,selected状态发生变化时,由于使用了v-memo=&quot;[item.id === selected]&quot;</span></span>
<span class="line"><span style="color:#6A737D;">  表示只有列表项被选中状态改变时才需要更新,其他状态未变化的列表项可以重用之前的vnode </span></span>
<span class="line"><span style="color:#6A737D;">  并跳过差异比较 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item in list&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item.id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-memo</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;[item.id === selected]&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;ID: {{ item.id }} - selected: {{ item.id === selected }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;...more child nodes&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="_28-vue3-中-watch-与-watcheffect-的区别" tabindex="-1">28.Vue3 中 watch 与 watchEffect 的区别? <a class="header-anchor" href="#_28-vue3-中-watch-与-watcheffect-的区别" aria-label="Permalink to &quot;28.Vue3 中 watch 与 watchEffect 的区别?&quot;">​</a></h2><p>在 Vue 3 中,watch 和 watchEffect 是两种不同的响应式数据监听方式,它们的区别如下:</p><ul><li>watch 适用于监听具体的数据变化,需要手动指定监听的数据和回调函数,而 watchEffect 则可以自动侦测数据变化并执行相应的副作用函数。</li><li>watch 可以监听到数据的变化前后值的变化,可以进行更加精细的控制和处理,而 watchEffect 只能获取到变化后的值。</li><li>watch 会在组件实例化时就执行一次回调函数,而 watchEffect 只有在组件渲染时才会执行,因此 watchEffect 可以更好地适应动态的响应式数据变化。</li><li>watch 需要手动清除监听器,否则可能会导致内存泄漏,而 watchEffect 会在组件销毁时自动清除。</li></ul><h2 id="_29-如何解决-vue3-中响应式数据丢失问题" tabindex="-1">29.如何解决 Vue3 中响应式数据丢失问题? <a class="header-anchor" href="#_29-如何解决-vue3-中响应式数据丢失问题" aria-label="Permalink to &quot;29.如何解决 Vue3 中响应式数据丢失问题?&quot;">​</a></h2><h2 id="pinia-对比-vuex-的优点" tabindex="-1">Pinia 对比 Vuex 的优点? <a class="header-anchor" href="#pinia-对比-vuex-的优点" aria-label="Permalink to &quot;Pinia 对比 Vuex 的优点?&quot;">​</a></h2><p>Pinia 和 Vuex 都是 Vue.js 中非常流行的状态管理库。Pinia 对比 Vuex 优点如下:</p><ul><li>更好的类型支持。Pinia 通过使用 TypeScript 实现,提供了比 Vuex 更好的类型支持。</li><li>更好的性能。Pinia 只在需要时才会触发状态更新,而不是像 Vuex 一样在每个状态变化时都会触发。这样可以避免不必要的更新,提高应用程序的性能。</li><li>更简单的 API。Pinia 的 API 更简单直观,不需要像 Vuex 那样编写大量的模板代码。它也更容易理解和维护,因为它更加模块化和解耦。Pinia 基于 Vue3 的 Composition API 组织代码,而 Vuex 更注重使用重命名空间和模块化组织代码。在 Vuex 引入了 state、mutation、action、getter 四个概念,其中触发 mutation 用于同步修改状态,触发 action 用于异步修改状态。而 Pinia 仅引入了 state、action、getter,触发 action 不仅可以同步修改状态,也可以异步修改状态。</li><li>更好的拓展性。Pinia 采用插件化的设计,使得开发者可以很方便地扩展和定制库的功能,比如添加插件以支持异步状态管理或数据持久化。</li></ul><h2 id="_26-详细说说-vue-中的-diff-算法" tabindex="-1">26.详细说说 Vue 中的 DIFF 算法 <a class="header-anchor" href="#_26-详细说说-vue-中的-diff-算法" aria-label="Permalink to &quot;26.详细说说 Vue 中的 DIFF 算法&quot;">​</a></h2><h2 id="_27-vue-与-react-的区别" tabindex="-1">27.Vue 与 React 的区别? <a class="header-anchor" href="#_27-vue-与-react-的区别" aria-label="Permalink to &quot;27.Vue 与 React 的区别?&quot;">​</a></h2><ul><li>从 UI 描述来看,Vue 使用模板(或者 JSX)描述 UI,而 React 使用 JSX 描述 UI。模板相比较 JSX 的优点在于提供模板语法糖(例如 v-for、v-if)、编译时可以根据编译信息进行优化,其缺点是不如 JSX 灵活。</li><li>从数据流方面来看,Vue 中数据属于可变数据(Mutable),React 中的数据属于不可变数据(Immutable)。Vue 内部提供了响应系统,通过拦截操作,修改一个数据的同时也会收集依赖,然后数据修改的时候去通知更新 DOM。简单来说修改 Vue 中的响应式数据,可以触发组件重新渲染。React 的范式更偏向函数式编程,在 React 中定义的状态是不可变的,修改状态时需要返回一个新的状态,直接修改状态并不会触发组件重新渲染。</li><li>从运行环境来看,Vue 偏编译时和运行时,而 React 属于重运行时。Vue 在运行时和预编译取了一个很好地权衡,保留了虚拟 dom,通过响应式控制虚拟 dom 的颗粒度,在预编译阶段里又做了足够多的性能优化。React 的 Runtime 相比较 Vue 更重一些,在 React 中数据发生变化后,并没有直接去操作 dom,而是生成一个新的虚拟 dom,并且通过 diff 算法得出最小的操作行为,该过程全部发生在运行时阶段。</li><li>从抽象层面来看,Vue 抽象层级较低,React 抽象层次较高。React 中定义了 Component、State、Hooks、Effect 等概念,抽象层次较高,上手难度较大。而 Vue 中仅了解 SFC、data、methods 等概念即可上手。</li></ul><h2 id="什么是-teleport" tabindex="-1">什么是 Teleport? <a class="header-anchor" href="#什么是-teleport" aria-label="Permalink to &quot;什么是 Teleport?&quot;">​</a></h2><p>Teleport 是 Vue3 内置的一个组件,它可以将一个组件内部的一部分模板&quot;传送&quot;到该组件的 DOM 结构外层的位置去。渲染的 DOM 结构,它不会影响组件间的逻辑关系,因此 Teleport 常用于解决弹出层层级问题,例如弹出层使用绝对布局,而外层元素设置为相对布局,由于弹出层是相对外层元素布局的,此时外层元素会影响弹出层布局。使用 Teleport 组件可以将组件内容传送至指定 DOM(例如 body),可以避免外层元素产生的布局影响。</p><h2 id="什么是-suspense" tabindex="-1">什么是 Suspense? <a class="header-anchor" href="#什么是-suspense" aria-label="Permalink to &quot;什么是 Suspense?&quot;">​</a></h2><p>Suspense 是 Vue3 提供内置的一个组件,用于处理在组件树中协调对异步依赖,它可以在组件树上层等待下层的多个嵌套异步依赖项解析完成,并可以在等待时渲染一个加载状态。</p>`,127),e=[o];function t(c,r,E,y,i,u){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{F as __pageData,A as default};
